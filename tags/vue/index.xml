<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vue on Jack Huang Blog</title>
    <link>https://jack842248.github.io/tags/vue/</link>
    <description>Recent content in vue on Jack Huang Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>jack842248@gmail.com (JackHuang)</managingEditor>
    <webMaster>jack842248@gmail.com (JackHuang)</webMaster>
    <lastBuildDate>Tue, 09 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jack842248.github.io/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【Vue】vue元件的切換與插槽</title>
      <link>https://jack842248.github.io/post/2021-02-09-vue-%E5%85%83%E4%BB%B6%E7%9A%84%E5%88%87%E6%8F%9B%E8%88%87%E6%8F%92%E6%A7%BD/</link>
      <pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-09-vue-%E5%85%83%E4%BB%B6%E7%9A%84%E5%88%87%E6%8F%9B%E8%88%87%E6%8F%92%E6%A7%BD/</guid>
      <description>動態切換元件 使用 v-if 判斷。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // &amp;lt;-----html-----&amp;gt; #app button(@click=&amp;#34;a = &amp;#39;apple&amp;#39;&amp;#34; :key=&amp;#34;a&amp;#34;) 按鈕A button(@click=&amp;#34;a = &amp;#39;banana&amp;#39;&amp;#34; :key=&amp;#34;a&amp;#34;) 按鈕B hr div(is=&amp;#34;apple&amp;#34; v-if=&amp;#34;a === &amp;#39;apple&amp;#39;&amp;#34;) div(is=&amp;#34;banana&amp;#34; v-if=&amp;#34;a === &amp;#39;banana&amp;#39;&amp;#34;) script(type=&amp;#34;text/x-template&amp;#34; id=&amp;#34;apple&amp;#34;) p 蘋果 script(type=&amp;#34;text/x-template&amp;#34; id=&amp;#34;banana&amp;#34;) p 香蕉 // &amp;lt;-----js-----&amp;gt; Vue.component(&amp;#34;apple&amp;#34;,{ template: &amp;#34;#apple&amp;#34;, }); Vue.</description>
    </item>
    
    <item>
      <title>【Vue】vue元件的建立與傳值</title>
      <link>https://jack842248.github.io/post/2021-02-08-vue-%E5%85%83%E4%BB%B6%E7%9A%84%E5%BB%BA%E7%AB%8B%E8%88%87%E5%82%B3%E5%80%BC/</link>
      <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-08-vue-%E5%85%83%E4%BB%B6%E7%9A%84%E5%BB%BA%E7%AB%8B%E8%88%87%E5%82%B3%E5%80%BC/</guid>
      <description>元件(Component) 元件資料是獨立運作，也可以重複使用。 元件裡面可以再包元件。 建立元件有兩種方式:
全域註冊 : 使用Vue.component()建立，其他app也可以使用。
局部註冊 : 在app裡使用components建立，只有app自己可以使用。
全域註冊元件 使用Vue.component()建立，第一個參數自訂[標籤名稱]。 在HTML建立一個類型為 text/x-template 的&amp;lt;script&amp;gt;，並賦予一個[id]名稱。 並在底下建立元件結構。 在 Vue.component() ，使用[template]對應&amp;lt;script&amp;gt;的[id]。 在HTML上使用自訂[標籤名稱]。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // &amp;lt;-----html-----&amp;gt; #app list-com //5. script(type=&amp;#34;text/x-template&amp;#34; id=&amp;#34;list-com&amp;#34;) //2. ul //3. li 蘋果 li 香蕉 li 鳳梨 // &amp;lt;-----js-----&amp;gt; Vue.component(&amp;#34;list-com&amp;#34;,{ //1. template: &amp;#34;#list-com&amp;#34; //4. }); var app = new Vue({ el: &amp;#34;#app&amp;#34; }); 局部註冊元件 在app裡使用[components]建立元件。 先自訂[標籤名稱]。 使用物件方式，帶入[template]，並建立元件結構。 在HTML上使用自訂[標籤名稱]。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // &amp;lt;-----html-----&amp;gt; #app list-com // &amp;lt;-----js-----&amp;gt; var app = new Vue({ el: &amp;#34;#app&amp;#34;, components:{ &amp;#34;list-com&amp;#34;:{ template: ` &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;蘋果&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;香蕉&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;鳳梨&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; ` } } }); 元件的data資料 元件的data需使用function(){return{.</description>
    </item>
    
    <item>
      <title>【Vue】vue-table排序(Bootstrap版)</title>
      <link>https://jack842248.github.io/post/2021-02-07-vue-table%E6%8E%92%E5%BA%8Fbootstrap%E7%89%88/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-07-vue-table%E6%8E%92%E5%BA%8Fbootstrap%E7%89%88/</guid>
      <description>methods版 在&amp;lt;tr&amp;gt;使用 v-for 將[a]資料列印出來。 在&amp;lt;th&amp;gt;&amp;ldquo;價格&amp;quot;上增加 @click 事件[sortPrice]，並在 methods 新增[sortPrice]方法。 [sortPrice]:判斷現在[b]的值是(true/false)，決定要排序大到小，還是小到大。 並且在排序完之後，改變[b]的值。 在&amp;lt;th&amp;gt;&amp;ldquo;到期日&amp;quot;上增加 @click 事件[sortDate]，並在 methods 新增[sortDate]方法。 [sortDate]:判斷現在[c]的值是(true/false)，決定要排序大到小，還是小到大。 並且在排序完之後，改變[c]的值。 在&amp;lt;th&amp;gt;&amp;ldquo;價格&amp;quot;裡的&amp;lt;span&amp;gt;上綁定 :class 判斷式，判斷[b]的值是(true/false)決定是否套用[rotate]樣式。 在&amp;lt;th&amp;gt;&amp;ldquo;到期日&amp;quot;裡的&amp;lt;span&amp;gt;上綁定 :class 判斷式，判斷[c]的值(true/false)決定是否套用[rotate]樣式。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 // &amp;lt;-----html-----&amp;gt; #app table.</description>
    </item>
    
    <item>
      <title>【Vue】vue事件修飾符</title>
      <link>https://jack842248.github.io/post/2021-02-06-vue-%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A3%BE%E7%AC%A6/</link>
      <pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-06-vue-%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A3%BE%E7%AC%A6/</guid>
      <description>修飾符(Modifiers) 在v-on和v-model上使用。 事件修飾符 修飾符 說明 如同 無使用 先觸發自己，再觸發外層 .capture 先觸發外層，再觸發自己 .stop 只觸發自己 event.stopPropagation() .self 只觸發自己 .once 只觸發一次 .prevent 取消預設事件 event.preventDefault() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // &amp;lt;-----html-----&amp;gt; ul#app //** 無使用 **// li(@click=&amp;#34;alert(&amp;#39;外層&amp;#39;)&amp;#34;) a(href=&amp;#34;#&amp;#34; @click=&amp;#34;alert(&amp;#39;內層&amp;#39;)&amp;#34;) 連結 //** .capture **// li(@click=&amp;#34;alert(&amp;#39;外層&amp;#39;)&amp;#34;) //(先觸發) a(href=&amp;#34;#&amp;#34; @click=&amp;#34;alert(&amp;#39;內層&amp;#39;)&amp;#34;) 連結 //點擊(再觸發) //** .</description>
    </item>
    
    <item>
      <title>【Vue】vue切換應用方法</title>
      <link>https://jack842248.github.io/post/2021-02-05-vue-%E5%88%87%E6%8F%9B%E6%87%89%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-05-vue-%E5%88%87%E6%8F%9B%E6%87%89%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>radio(三項切換) v-on + v-if 方法。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // &amp;lt;-----html-----&amp;gt; #app input(type=&amp;#34;radio&amp;#34; name=&amp;#34;a&amp;#34; @click=&amp;#34;a=&amp;#39;A&amp;#39;&amp;#34;) input(type=&amp;#34;radio&amp;#34; name=&amp;#34;a&amp;#34; @click=&amp;#34;a=&amp;#39;B&amp;#39;&amp;#34;) input(type=&amp;#34;radio&amp;#34; name=&amp;#34;a&amp;#34; @click=&amp;#34;a=&amp;#39;C&amp;#39;&amp;#34;) p(v-if=&amp;#34; a==&amp;#39;A&amp;#39; &amp;#34;) 蘋果 p(v-else-if=&amp;#34; a==&amp;#39;B&amp;#39; &amp;#34;) 香蕉 p(v-else-if=&amp;#34; a==&amp;#39;C&amp;#39; &amp;#34;) 鳳梨 // &amp;lt;-----js-----&amp;gt; var app = new Vue({ el: &amp;#34;#app&amp;#34;, data:{ a: &amp;#34;A&amp;#34; } }); v-on + {{}} 方法。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // &amp;lt;-----html-----&amp;gt; #app input(type=&amp;#34;radio&amp;#34; name=&amp;#34;a&amp;#34; @click=&amp;#34;a=&amp;#39;蘋果&amp;#39;&amp;#34;) input(type=&amp;#34;radio&amp;#34; name=&amp;#34;a&amp;#34; @click=&amp;#34;a=&amp;#39;香蕉&amp;#39;&amp;#34;) input(type=&amp;#34;radio&amp;#34; name=&amp;#34;a&amp;#34; @click=&amp;#34;a=&amp;#39;鳳梨&amp;#39;&amp;#34;) p {{a}} // &amp;lt;-----js-----&amp;gt; var app = new Vue({ el: &amp;#34;#app&amp;#34;, data:{ a: &amp;#34;蘋果&amp;#34; } }); v-for + v-on + {{}} 方法。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // &amp;lt;-----html-----&amp;gt; #app input(v-for=&amp;#34;item in b&amp;#34; type=&amp;#34;radio&amp;#34; name=&amp;#34;a&amp;#34; @click=&amp;#34;change(item)&amp;#34;) p {{a}} // &amp;lt;-----js-----&amp;gt; var app = new Vue({ el: &amp;#34;#app&amp;#34;, data:{ a: &amp;#34;&amp;#34;, b:[ {name: &amp;#34;蘋果&amp;#34;, amount: 100}, {name: &amp;#34;香蕉&amp;#34;, amount: 300}, {name: &amp;#34;鳳梨&amp;#34;, amount: 500} ], }, methods:{ change: function(item){ switch(item.</description>
    </item>
    
    <item>
      <title>【Vue】vue進階應用方法</title>
      <link>https://jack842248.github.io/post/2021-02-04-vue-%E9%80%B2%E9%9A%8E%E6%87%89%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 04 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-04-vue-%E9%80%B2%E9%9A%8E%E6%87%89%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>v-text模板語法 可以插入 運算子 來呈現結果。(範例一) 使用 v-once 可以只綁定一次，之後在修改不會變更。(範例二) 可以直接撰寫 javascript 。(範例三) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // &amp;lt;-----html-----&amp;gt; #app //** 範例一 **// p {{ a + b }} //100300 p {{ a * b }} //30000 p {{ a == b }} //false //** 範例二 **// p(v-text=&amp;#34;b&amp;#34; v-once) //300 //** 範例三 **// p {{ b.</description>
    </item>
    
    <item>
      <title>【Vue】vue-todolist(Bootstrap版)</title>
      <link>https://jack842248.github.io/post/2021-02-03-vue-todolistbootstrap%E7%89%88/</link>
      <pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-03-vue-todolistbootstrap%E7%89%88/</guid>
      <description>建立完成的Bootstrap4初始版型 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #app.container.my-3 .input-group.mb-3 .input-group-prepend span.input-group-text 待辦事項 input.form-control(type=&amp;#39;text&amp;#39; placeholder=&amp;#39;準備要做的任務&amp;#39;) .input-group-append button.btn.btn-primary(type=&amp;#39;button&amp;#39;) 新增 .card.text-center .card-header ul.nav.nav-tabs.card-header-tabs li.nav-item a.nav-link.active(href=&amp;#39;#&amp;#39;) 全部 li.nav-item a.nav-link(href=&amp;#39;#&amp;#39;) 進行中 li.nav-item a.nav-link(href=&amp;#39;#&amp;#39;) 已完成 ul.list-group.list-group-flush.text-left li.list-group-item(v-for=&amp;#34;item in filterTodo&amp;#34;) .d-flex .form-check input.form-check-input(type=&amp;#39;checkbox&amp;#39; id=&amp;#34;a1&amp;#34;) label.form-check-label(:for=&amp;#39;item.id&amp;#39;) 待辦事項一 button.close.ml-auto(type=&amp;#39;button&amp;#39;) span &amp;amp;times; input.form-control(type=&amp;#39;text&amp;#39;) .card-footer.d-flex.justify-content-between span 還有X筆任務未完成 a(href=&amp;#39;#&amp;#39;) 清除所有任務 撰寫Vue.</description>
    </item>
    
    <item>
      <title>【Vue】vue-todolist(精簡版)</title>
      <link>https://jack842248.github.io/post/2021-02-02-vue-todolist%E7%B2%BE%E7%B0%A1%E7%89%88/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-02-vue-todolist%E7%B2%BE%E7%B0%A1%E7%89%88/</guid>
      <description>取得輸入框裡的值，點擊按鈕，新增到清單上。 在 data 新增[newTodo]=&amp;ldquo;空字串&amp;rdquo;，用 v-model 與 輸入框 綁定。 在 新增按鈕 上綁定 @click 事件[addTodo]，在 methods 新增[addTodo]方法。 在 data 新增[todos]=[空陣列]。 使用 Date.now() 取得現在時間作為編號 (id) ，並賦予到[id]變數上。 將[newTodo]，賦予到[title]變數上。 將[id]、[title]和[checkbox]:false組成{物件}，使用 push() 將組成的{物件}傳入[todos]。 在 &amp;lt;li&amp;gt; 使用 v-for 列印出[todos]的所有{物件}，並且將{物件}命名為 (item) (item in todos)。 將 (item) 的[id]用 :for綁定在 &amp;lt;label&amp;gt; 上。 將 (item) 的[id]用 :id綁定在 checkbox 上。 將 (item) 的[title]用 {{}} 顯示在 &amp;lt;label&amp;gt;文字上 。 將 (item) 的[checkbox]用 v-model 綁定在 checkbox 上。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 // &amp;lt;-----html-----&amp;gt; #app //1.</description>
    </item>
    
    <item>
      <title>【Vue】vue基本模板語法</title>
      <link>https://jack842248.github.io/post/2021-02-01-vue-%E5%9F%BA%E6%9C%AC%E6%A8%A1%E6%9D%BF%E8%AA%9E%E6%B3%95/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-01-vue-%E5%9F%BA%E6%9C%AC%E6%A8%A1%E6%9D%BF%E8%AA%9E%E6%B3%95/</guid>
      <description>Vue.js是以資料狀態操作畫面，偏向MVVM軟體設計模式。
MVVM(Model View Viewmodel) 英文 Model View Viewmodel 中文 模型 視圖 資料聯繫器 [視圖]←綁定→[資料聯繫器]→←[模型] MVC(Model View Controller) 英文 Model View Controller Database 中文 模型 視圖 控制器 資料庫 [視圖]→發送請求→[控制器]→[模型]→[資料庫]→回傳資料→[模型]→[控制器]→渲染→[視圖] 生命週期 英文 中文 說明 開始創建 beforeCreate 準備載入資料 數據觀測建立 created 載入資料 要載入ajax要在這階段之後 編譯模板 beforeMount 準備繪製元件 模板建立完成 mounted 繪製元件 要操作DOM元素要在這階段之後 資料變動 updated 更新資料時觸發 activated 有&amp;lt;keep-alive&amp;gt;時才會觸發 deactivated 有&amp;lt;keep-alive&amp;gt;時才會觸發 beforeDestroy 準備移除資料 移除觀測、子元件、監聽事件 destroyed 移除資料 開始使用Vue.js 使用 element (簡化:el)綁定HTML上的DOM元素。 #app裡不能再建立#app。 若有多個.app只會綁定一個。 1 2 3 const app = new Vue({ el: &amp;#34;#app&amp;#34; }); v-text 使用v-text可將資料裡的&amp;quot;文字&amp;quot;帶入&amp;lt;標籤&amp;gt;。 簡化寫法 {{}}。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 &amp;lt;!</description>
    </item>
    
    <item>
      <title>【Vue】vue.js Devtools安裝</title>
      <link>https://jack842248.github.io/post/2021-01-31-vue-devtools%E5%AE%89%E8%A3%9D/</link>
      <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-31-vue-devtools%E5%AE%89%E8%A3%9D/</guid>
      <description>&lt;hr&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;h2 id=&#34;安裝vuejs-devtools開發者工具&#34;&gt;安裝Vue.js devtools開發者工具&lt;/h2&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;&lt;/h1&gt;</description>
    </item>
    
  </channel>
</rss>
