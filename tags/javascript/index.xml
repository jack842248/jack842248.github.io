<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on Jack Huang Blog</title>
    <link>https://jack842248.github.io/tags/javascript/</link>
    <description>Recent content in javascript on Jack Huang Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>jack842248@gmail.com (JackHuang)</managingEditor>
    <webMaster>jack842248@gmail.com (JackHuang)</webMaster>
    <lastBuildDate>Thu, 18 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jack842248.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Javascript小知識11</title>
      <link>https://jack842248.github.io/post/2021-02-18-javascript%E5%B0%8F%E7%9F%A5%E8%AD%9811/</link>
      <pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-18-javascript%E5%B0%8F%E7%9F%A5%E8%AD%9811/</guid>
      <description>localStorage   可以將&amp;quot;字串&amp;quot;資料儲存在 Chrome → Application → LocalStorage 裡。      Key Value     &amp;mdash; &amp;mdash;      使用 .setItem 、 .getItem 來存取資料。   1 2 3 4 5 6  /** 存入資料 **/ localStorage.setItem(&amp;#34;a&amp;#34;,&amp;#34;蘋果&amp;#34;); /** 取出資料 **/ let a = localStorage.getItem(&amp;#34;a&amp;#34;); console.log(a); //蘋果       Key Value     a 蘋果       localStorage + input   將輸入框裡的值存入後再取出。   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  // &amp;lt;-----html-----&amp;gt; input(type=&amp;#34;text&amp;#34;) button.</description>
    </item>
    
    <item>
      <title>Javascript小知識10</title>
      <link>https://jack842248.github.io/post/2021-02-17-javascript%E5%B0%8F%E7%9F%A5%E8%AD%9810/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-17-javascript%E5%B0%8F%E7%9F%A5%E8%AD%9810/</guid>
      <description>點擊事件(Click Event)   .onclick = function(){&amp;hellip;} 。    直接在DOM元素上 onclick=&amp;quot;&amp;hellip;&amp;quot; (不建議使用)。    .addEventListener(&amp;ldquo;click&amp;rdquo;,function(){&amp;hellip;}) 。   .onclick只能綁定最後一次事件，.addEventListener可以綁定多次事件，
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  // &amp;lt;-----html-----&amp;gt; button.btn1 按鈕1 button.btn2(onclick=&amp;#34;console.log(&amp;#39;您點擊了，按鈕2&amp;#39;)&amp;#34;) 按鈕2 button.btn3 按鈕3 // &amp;lt;-----js-----&amp;gt; let btn1 = document.querySelector(&amp;#34;.btn1&amp;#34;); let btn3 = document.querySelector(&amp;#34;.btn3&amp;#34;); btn1.onclick = function(){ console.log(&amp;#34;您點擊了，按鈕1&amp;#34;); } btn3.addEventListener(&amp;#34;click&amp;#34;,function(){ console.log(&amp;#34;您點擊了，按鈕3&amp;#34;); });      監聽事件(Listener Event)   .</description>
    </item>
    
    <item>
      <title>Javascript小知識9</title>
      <link>https://jack842248.github.io/post/2021-02-16-javascript%E5%B0%8F%E7%9F%A5%E8%AD%989/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-16-javascript%E5%B0%8F%E7%9F%A5%E8%AD%989/</guid>
      <description>取得DOM元素方法     方法 取得目標 得到結果     .getElementById() id 只能取得一個   .getElementsByName() name 以陣列形式呈現   .getElementsByTagName() &amp;lt;標籤&amp;gt; 以陣列形式呈現   .querySelector() id、class、&amp;lt;標籤&amp;gt; 只能取得一個   .querySelectorAll() id、class 以陣列形式呈現       .getElementById()  1 2 3 4 5 6 7  // &amp;lt;-----html-----&amp;gt; #a 蘋果 #a 香蕉 // &amp;lt;-----js-----&amp;gt; let a = document.getElementById(&amp;#34;a&amp;#34;); console.log(a); //&amp;lt;div id=&amp;#39;a&amp;#39;&amp;gt;蘋果&amp;lt;/div&amp;gt;      .</description>
    </item>
    
    <item>
      <title>Javascript小知識8</title>
      <link>https://jack842248.github.io/post/2021-02-15-javascript%E5%B0%8F%E7%9F%A5%E8%AD%988/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-15-javascript%E5%B0%8F%E7%9F%A5%E8%AD%988/</guid>
      <description>全域變數(Global Variable)   在function裡的變數稱為，區域變數。(範例一)   區域變數(Area Variable)   在function外的變數稱為，全域變數。(範例二)   1 2 3 4 5 6 7 8 9 10 11 12 13 14  /** 範例一 **/ function fn1(){ let a = &amp;#34;蘋果&amp;#34;; console.log(a); //蘋果 } fn1(); /** 範例二 **/ let a; function fn1(){ a = &amp;#34;蘋果&amp;#34;; } fn1(); console.log(a); //蘋果      if、else if、else   適合判斷式數值，限制範圍。    一律使用 if 開頭，若不成立，則往下執行。    可以使用多個 else if ，若不成立，則往下執行。    若以上都不成立則執行 else 。   1 2 3 4 5 6 7 8 9 10 11 12 13 14  let hungry = 5; //飢餓程度1~10 function eat(fruit){ console.</description>
    </item>
    
    <item>
      <title>Javascript小知識7</title>
      <link>https://jack842248.github.io/post/2021-01-30-javascript%E5%B0%8F%E7%9F%A5%E8%AD%987/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-30-javascript%E5%B0%8F%E7%9F%A5%E8%AD%987/</guid>
      <description>var、let、const   皆為宣告變數用。      名稱 var let const     作用域 在函式裡 在block{}裡 在block{}裡   宣告的變數 可以賦予新的值 可以賦予新的值 不能賦予新的值   重複宣告變數時 不會出錯 會出錯 會出錯   從創造到執行階段會 提升(Hoisting) 暫時性死區(TDZ) 會出現錯誤     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  /** 變數賦予新的值 **/ var a = 1; a = 2; console.</description>
    </item>
    
    <item>
      <title>Javascript小知識6</title>
      <link>https://jack842248.github.io/post/2021-01-29-javascript%E5%B0%8F%E7%9F%A5%E8%AD%986/</link>
      <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-29-javascript%E5%B0%8F%E7%9F%A5%E8%AD%986/</guid>
      <description>Object.defineProperty()   可以調整物件裡的屬性特徵。      帶入的值 名稱 中文 預設值 例如     物件 Object  &amp;mdash;    屬性 &amp;quot;Attributes&amp;quot;  &amp;mdash;    參數a value 屬性的值 &amp;mdash;    參數b writable 可否寫入 true 賦予(=)   參數c configurable 可否被刪除 true delete   參數d enumerable 可否被列舉 true for&amp;hellip;in     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  var obj1 = { name:&amp;#34;蘋果&amp;#34;, amount:100 } Object.</description>
    </item>
    
    <item>
      <title>Javascript小知識5</title>
      <link>https://jack842248.github.io/post/2021-01-28-javascript%E5%B0%8F%E7%9F%A5%E8%AD%985/</link>
      <pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-28-javascript%E5%B0%8F%E7%9F%A5%E8%AD%985/</guid>
      <description>原型(Prototype)   純值可用建構式繼承在原型下。    原型可利用建構函式新增屬性。    原型有向上查找屬性的功能，而且屬性是共用的。    原型鍊:      建構式 原型(上層) 原型(上上層)     new Object() &amp;mdash; Object   new Array() Array Object   new Number() Number Object   new String() String Object   new Boolean() Boolean Object     1 2 3 4 5 6 7 8 9  var a = [1 , 2 , 3]; var b = [4 , 5 , 6]; a.</description>
    </item>
    
    <item>
      <title>Javascript小知識4</title>
      <link>https://jack842248.github.io/post/2021-01-27-javascript%E5%B0%8F%E7%9F%A5%E8%AD%984/</link>
      <pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-27-javascript%E5%B0%8F%E7%9F%A5%E8%AD%984/</guid>
      <description>函式(Function)   是包含{程式碼片段}的物件。    擁有被呼叫、回傳的功能。     函式可細分以下幾種 :
  函式陳述式
 具名函式。(範例一)    函式表達式
  匿名函式。(範例二)
  具名函式。(範例三)
       具名的函式能夠在函式中被呼叫使用
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  /** 範例一 **/ function fn1(){ console.</description>
    </item>
    
    <item>
      <title>Javascript小知識3</title>
      <link>https://jack842248.github.io/post/2021-01-26-javascript%E5%B0%8F%E7%9F%A5%E8%AD%983/</link>
      <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-26-javascript%E5%B0%8F%E7%9F%A5%E8%AD%983/</guid>
      <description>物件實字(Object Literals)   直接撰寫 var obj1 = {&amp;hellip;} 物件。(範例一)   建構物件(Constructor Object)   使用 new Object() 包裹方式建立。(範例二)   1 2 3 4 5 6 7 8 9 10  /** 範例一 **/ var obj1 = { name:&amp;#34;蘋果&amp;#34;, amount: 100 } /** 範例二 **/ var obj1 = new Object(); obj1.name = &amp;#34;蘋果&amp;#34;; obj1.amount = 100;      物件的基本應用方法 :   取值。(範例一)    新增屬性。(範例二)    刪除屬性。(範例三)    新增物件。(範例四)   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  var fruit = { name:&amp;#34;蘋果&amp;#34;, amount: 100 } /** 範例一 **/ console.</description>
    </item>
    
    <item>
      <title>Javascript小知識2</title>
      <link>https://jack842248.github.io/post/2021-01-25-javascript%E5%B0%8F%E7%9F%A5%E8%AD%982/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-25-javascript%E5%B0%8F%E7%9F%A5%E8%AD%982/</guid>
      <description>陳述式(Statement)   不會回傳結果，不能賦值(=)到變數上。      陳述式 例如     判斷式 if、else if、else、switch、break   宣告變數 var、let、const   函式陳述式 function fn1(){&amp;hellip;}   Block區塊 {}     1 2 3 4 5 6 7 8 9 10 11 12 13  /** 判斷式 **/ if(...){...}else{...} /** 宣告變數 **/ var a; /** 函式陳述式 **/ function fn1(){...} /** Block區塊 **/ { let a = 1; }      判斷式(if&amp;hellip;else)   判斷式裡如果是 真值(Truthy) ，就會成立。(範例一)    判斷式裡如果是 假值(Falsy) ，就會不成立。(範例二)      判斷值 例如     真值 true 、 1 、 &amp;ldquo;1&amp;rdquo; 、 [] 、 {}   假值 false 、 0 、 &amp;quot;&amp;quot; 、 NaN 、 null 、 undefined     1 2 3 4 5 6 7 8 9 10 11 12 13  /** 範例一 **/ if([]){ console.</description>
    </item>
    
    <item>
      <title>Javascript小知識1</title>
      <link>https://jack842248.github.io/post/2021-01-24-javascript%E5%B0%8F%E7%9F%A5%E8%AD%981/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-24-javascript%E5%B0%8F%E7%9F%A5%E8%AD%981/</guid>
      <description>程式語言可以分為兩種 : javascript屬於直譯式語言。  直譯式語言(Interpreted Language)     例如 JavaScript、Python、PHP、Ruby、BASIC、LISP、Perl、R     流程 原始碼 → 直譯器 → 代碼生成 → 執行   特性 程式碼由上到下執行，效能比較差、除錯比較慢、需要依賴執行環境。     編譯式語言(Compiled Language)     例如 Java、C、C#、C++、Pascal     流程 原始碼 → 預處理器 → 代碼生成 → 執行   特性 效能比較好、除錯比較快、程式碼可獨立執行。       程式語言的作用域可以分為兩種 : javascript屬於靜態作用域。  靜態作用域(Lexical Scope)   又稱 : 語法作用域。    語法在解析時就決定作用域，且不再改變。   1 2 3 4 5 6  function fn1(){ var a = 1; } fn1(); console.</description>
    </item>
    
  </channel>
</rss>
