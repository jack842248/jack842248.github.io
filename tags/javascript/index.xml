<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javaScript on Jack Huang Blog</title>
    <link>https://jack842248.github.io/tags/javascript/</link>
    <description>Recent content in javaScript on Jack Huang Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>jack842248@gmail.com (JackHuang)</managingEditor>
    <webMaster>jack842248@gmail.com (JackHuang)</webMaster>
    <lastBuildDate>Tue, 09 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://jack842248.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【JS】提高效能延遲載入方法</title>
      <link>https://jack842248.github.io/post/2024-01-09-javascript-%E6%8F%90%E9%AB%98%E6%95%88%E8%83%BD%E5%BB%B6%E9%81%B2%E8%BC%89%E5%85%A5%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 09 Jan 2024 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2024-01-09-javascript-%E6%8F%90%E9%AB%98%E6%95%88%E8%83%BD%E5%BB%B6%E9%81%B2%E8%BC%89%E5%85%A5%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;hr&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;h2 id=&#34;使用lozadjs套件&#34;&gt;使用lozad.js套件&lt;/h2&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>【JS】swiper輪播效果</title>
      <link>https://jack842248.github.io/post/2023-04-23-javascript-swiper%E8%BC%AA%E6%92%AD%E6%95%88%E6%9E%9C/</link>
      <pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2023-04-23-javascript-swiper%E8%BC%AA%E6%92%AD%E6%95%88%E6%9E%9C/</guid>
      <description>&lt;hr&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;h2 id=&#34;swiper使用前準備&#34;&gt;swiper使用前準備&lt;/h2&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>【JS】lightbox2燈箱效果</title>
      <link>https://jack842248.github.io/post/2023-04-22-javascript-lightbox2%E7%87%88%E7%AE%B1%E6%95%88%E6%9E%9C/</link>
      <pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2023-04-22-javascript-lightbox2%E7%87%88%E7%AE%B1%E6%95%88%E6%9E%9C/</guid>
      <description>&lt;hr&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;h2 id=&#34;lightbox2使用前準備&#34;&gt;lightbox2使用前準備&lt;/h2&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>【JS】ES6</title>
      <link>https://jack842248.github.io/post/2021-03-07-javascript-ecmascript6/</link>
      <pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-03-07-javascript-ecmascript6/</guid>
      <description>var、let、const 皆為宣告變數用。 名稱 var let const 作用域 在window、函式 在block{}裡 在block{}裡 宣告的變數 可以賦予新的值 可以賦予新的值 不能賦予新的值 重複宣告變數時 不會出錯 會出錯 會出錯 從創造到執行階段會 提升(Hoisting) 暫時性死區(TDZ) 會出現錯誤 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 /** 變數賦予新的值 **/ var a = 1; a = 2; console.log(a); //2 let b = 1; b = 2; console.</description>
    </item>
    
    <item>
      <title>【JS】原型與建構函式</title>
      <link>https://jack842248.github.io/post/2021-03-05-javascript-%E5%8E%9F%E5%9E%8B%E8%88%87%E5%BB%BA%E6%A7%8B%E5%87%BD%E5%BC%8F/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-03-05-javascript-%E5%8E%9F%E5%9E%8B%E8%88%87%E5%BB%BA%E6%A7%8B%E5%87%BD%E5%BC%8F/</guid>
      <description>原型(Prototype) 純值可用建構式繼承在原型下。 原型可利用建構函式新增屬性。 原型有向上查找屬性的功能，而且屬性是共用的。 原型鍊: 建構式 原型(上層) 原型(上上層) new Object() &amp;mdash; Object new Array() Array Object new Number() Number Object new String() String Object new Boolean() Boolean Object 1 2 3 4 5 6 7 8 9 var a = [1 , 2 , 3]; var b = [4 , 5 , 6]; a.__proto__.getLast = function(){ //在上層[Array]原型上，新增[getLast]屬性 return this[this.length - 1] //回傳[最後一項]陣列 } console.log(b.getLast()); //6 //因為a、b都是在[Array]原型底下，所有都可以使用[getLast]屬性 自訂義原型物件 : __proto__ : 是原型的上層。 prototype : 是原型裡的函式。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 /** 建構[狗]原型 **/ function Dog(name,color,size){ //使用建構函式，建構[Dog]原型 this.</description>
    </item>
    
    <item>
      <title>【JS】函式與參數</title>
      <link>https://jack842248.github.io/post/2021-03-04-javascript-%E5%87%BD%E5%BC%8F%E8%88%87%E5%8F%83%E6%95%B8/</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-03-04-javascript-%E5%87%BD%E5%BC%8F%E8%88%87%E5%8F%83%E6%95%B8/</guid>
      <description>函式(Function) 是包含{程式碼片段}的物件。 擁有被呼叫、回傳的功能。 函式可細分以下幾種 :
函式陳述式
具名函式。(範例一) 函式表達式
匿名函式。(範例二)
具名函式。(範例三)
具名的函式能夠在函式中被呼叫使用
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 /** 範例一 **/ function fn1(){ console.log(&amp;#34;蘋果&amp;#34;); } fn1(); //執行 /** 範例二 **/ var fn1 = function(){ console.</description>
    </item>
    
    <item>
      <title>【JS】物件與陣列</title>
      <link>https://jack842248.github.io/post/2021-03-03-javascript-%E7%89%A9%E4%BB%B6%E8%88%87%E9%99%A3%E5%88%97/</link>
      <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-03-03-javascript-%E7%89%A9%E4%BB%B6%E8%88%87%E9%99%A3%E5%88%97/</guid>
      <description>物件實字(Object Literals) 直接撰寫 var obj1 = {&amp;hellip;} 物件。(範例一) 建構物件(Constructor Object) 使用 new Object() 包裹方式建立。(範例二) 1 2 3 4 5 6 7 8 9 10 /** 範例一 **/ var obj1 = { name:&amp;#34;蘋果&amp;#34;, amount: 100 } /** 範例二 **/ var obj1 = new Object(); obj1.name = &amp;#34;蘋果&amp;#34;; obj1.amount = 100; 物件的基本應用方法 : 取值。(範例一) 新增屬性。(範例二) 刪除屬性。(範例三) 新增物件。(範例四) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 var a ={ name:&amp;#34;蘋果&amp;#34;, amount: 100 } /** 範例一 **/ console.</description>
    </item>
    
    <item>
      <title>【JS】運算與型別</title>
      <link>https://jack842248.github.io/post/2021-03-02-javascript-%E9%81%8B%E7%AE%97%E8%88%87%E5%9E%8B%E5%88%A5/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-03-02-javascript-%E9%81%8B%E7%AE%97%E8%88%87%E5%9E%8B%E5%88%A5/</guid>
      <description>陳述式(Statement) 不會回傳結果，不能賦值(=)到變數上。 陳述式 例如 判斷式 if、else if、else、switch、break 宣告變數 var、let、const 函式陳述式 function fn1(){&amp;hellip;} Block區塊 {} 1 2 3 4 5 6 7 8 9 10 11 12 13 /** 判斷式 **/ if(...){...}else{...} /** 宣告變數 **/ var a; /** 函式陳述式 **/ function fn1(){...} /** Block區塊 **/ { let a = 1; } 判斷式(if&amp;hellip;else) 判斷式裡如果是 真值(Truthy) ，就會成立。(範例一) 判斷式裡如果是 假值(Falsy) ，就會不成立。(範例二) 判斷值 例如 真值 true 、 1 、 &amp;ldquo;1&amp;rdquo; 、 [] 、 {} 假值 false 、 0 、 &amp;quot;&amp;quot; 、 NaN 、 null 、 undefined 1 2 3 4 5 6 7 8 9 10 11 12 13 /** 範例一 **/ if([]){ console.</description>
    </item>
    
    <item>
      <title>【JS】認識JavaScript</title>
      <link>https://jack842248.github.io/post/2021-03-01-javascript-%E8%AA%8D%E8%AD%98javascript/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-03-01-javascript-%E8%AA%8D%E8%AD%98javascript/</guid>
      <description>程式語言可以分為兩種 : javascript屬於直譯式語言。 直譯式語言(Interpreted Language) 例如 JavaScript、Python、PHP、Ruby、BASIC、LISP、Perl、R 流程 原始碼 → 直譯器 → 代碼生成 → 執行 特性 程式碼由上到下執行，效能比較差、除錯比較慢、需要依賴執行環境。 編譯式語言(Compiled Language) 例如 Java、C、C#、C++、Pascal 流程 原始碼 → 預處理器 → 代碼生成 → 執行 特性 效能比較好、除錯比較快、程式碼可獨立執行。 程式語言的作用域可以分為兩種 : javascript屬於靜態作用域。 靜態作用域(Lexical Scope) 又稱 : 語法作用域。 語法在解析時就決定作用域，且不再改變。 1 2 3 4 5 6 function fn1(){ var a = 1; } fn1(); console.log(a); //a is not defined //因為console.log(a)不在function內 動態作用域(Dynamic Scope) 作用域在函式調用時才決定。 程式語言的執行方式可以分為兩種 : javascript屬於單執行緒。 單執行緒(Single Thread) 同步事件會依序執行。 非同步事件會先移到 事件佇列(Event Queue) ，等待其他事件執行完才會執行。</description>
    </item>
    
    <item>
      <title>【JS】封裝AJAX請求</title>
      <link>https://jack842248.github.io/post/2021-02-24-javascript-%E5%B0%81%E8%A3%9Dajax%E8%AB%8B%E6%B1%82/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-24-javascript-%E5%B0%81%E8%A3%9Dajax%E8%AB%8B%E6%B1%82/</guid>
      <description>建立Promise Promise 是一個函式物件，需要用函式來建構。
PromiseState : 狀態。
PromiseValue : 回傳的值。
需要帶入兩個參數 resolve : 成功， reject : 失敗。
在 *非同步事件 之後才會執行結果。
需要用 .then() : 顯示成功的結果， catch() : 顯示失敗的結果。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 function promiseFn(item){ //1. return new Promise((resolve,reject)=&amp;gt;{ //2. setTimeout(()=&amp;gt;{ //3. if(item){ resolve(&amp;#34;成功&amp;#34;); }else{ reject(&amp;#34;失敗&amp;#34;); } },1000) }) } promiseFn(1) .then((res)=&amp;gt;{ //4. console.log(res); }) .catch((rej)=&amp;gt;{ //4. console.log(rej); }) 用.</description>
    </item>
    
    <item>
      <title>【JS】操作Array方法</title>
      <link>https://jack842248.github.io/post/2021-02-23-javascript-%E6%93%8D%E4%BD%9Carray%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 23 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-23-javascript-%E6%93%8D%E4%BD%9Carray%E6%96%B9%E6%B3%95/</guid>
      <description>新增陣列 .push (要新增的東西)，新增到陣列最後方。 1 2 3 let a = [&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;]; a.push(&amp;#34;芭樂&amp;#34;); console.log(a); //[&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;,&amp;#34;芭樂&amp;#34;] .unshift (要新增的東西)，新增到陣列最前方。 1 2 3 let a = [&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;]; a.unshift(&amp;#34;芭樂&amp;#34;); console.log(a); //[&amp;#34;芭樂&amp;#34;,&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;] .concat (要新增的東西)，新增到陣列最後方。 1 2 3 let a = [&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;]; let b = a.concat(&amp;#34;芭樂&amp;#34;); console.log(b); //[&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;,&amp;#34;芭樂&amp;#34;] 刪除陣列 .pop() ，刪除陣列最後一項。 1 2 3 let a = [&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;]; a.pop(); console.log(a); //[&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;] .shift() ，刪除陣列第一項。 1 2 3 let a = [&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;]; a.shift(); console.log(a); //[&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;] .splice (從第幾項開始刪除,刪到第幾項)。 1 2 3 let a = [&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;]; a.</description>
    </item>
    
    <item>
      <title>【JS】Google Maps API</title>
      <link>https://jack842248.github.io/post/2021-02-21-javascript-google-maps-api/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-21-javascript-google-maps-api/</guid>
      <description>應用程式介面(Application Programming Interface) 簡稱API。 應用程式提供的服務，用來接收或傳送資料給應用程式。例如 :
Heroku，主機服務。
GoogleMap，地圖導覽服務。
Firebase，資料庫服務
Google Map API 在Google雲端平台創建一個帳戶(需綁定一張信用卡)。(不會自動收取費用，除非手動升級) 在雲端平台上建立一個專案。 點擊&amp;quot;地圖管理&amp;quot;→&amp;quot;CREATE NEW MAP ID&amp;quot;，新建一個ID。 點擊&amp;quot;地圖樣式&amp;quot;→&amp;quot;CREATE NEW MAP STYLE&amp;quot;，新建一個地圖樣式。 點擊&amp;quot;解決方案建構工具&amp;quot;→&amp;quot;將程式碼複製到剪貼簿&amp;quot;。 貼到編輯器上，開始建置地圖。 初始化地圖 以夢時代為顯示中心。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // &amp;lt;-----html-----&amp;gt; div#map script(src=&amp;#34;https://maps.googleapis.com/maps/api/js?key={{{API金鑰}}}&amp;amp;callback=initMap&amp;amp;libraries=&amp;amp;v=weekly&amp;#34; defer) // &amp;lt;-----css-----&amp;gt; #map height: 100% html,body height: 100% margin: 0 padding: 0 // &amp;lt;-----js-----&amp;gt; function initMap(){ //初始化 const map = new google.</description>
    </item>
    
    <item>
      <title>【JS】屬性特徵與特性</title>
      <link>https://jack842248.github.io/post/2021-03-06-javascript-%E5%B1%AC%E6%80%A7%E7%89%B9%E5%BE%B5%E8%88%87%E7%89%B9%E6%80%A7/</link>
      <pubDate>Sat, 13 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-03-06-javascript-%E5%B1%AC%E6%80%A7%E7%89%B9%E5%BE%B5%E8%88%87%E7%89%B9%E6%80%A7/</guid>
      <description>Object.defineProperty() 可以調整物件裡的屬性特徵。 帶入的值 名稱 中文 預設值 例如 物件 Object &amp;mdash; 屬性 &amp;quot;Attributes&amp;quot; &amp;mdash; 參數a value 屬性的值 &amp;mdash; 參數b writable 可否寫入 true 賦予(=) 參數c configurable 可否被刪除 true delete 參數d enumerable 可否被列舉 true for&amp;hellip;in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 var obj1 = { name:&amp;#34;蘋果&amp;#34;, amount:100 } Object.defineProperty(obj1 , &amp;#34;name&amp;#34; , { value: &amp;#34;香蕉&amp;#34;, writable: true, configurable: true, enumerable: true }); //var obj1 = { // name:&amp;#34;香蕉&amp;#34;, // amount:100 //} /** 如果writable: false **/ obj1.</description>
    </item>
    
    <item>
      <title>【JS】驗證表單</title>
      <link>https://jack842248.github.io/post/2021-02-10-javascript-%E9%A9%97%E8%AD%89%E8%A1%A8%E5%96%AE/</link>
      <pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-10-javascript-%E9%A9%97%E8%AD%89%E8%A1%A8%E5%96%AE/</guid>
      <description>POST註冊表單(application/x-www-form-urlencoded) 1 2 3 4 5 6 7 8 9 10 11 &amp;lt;label for=&amp;#34;email&amp;#34;&amp;gt;帳號：&amp;lt;/label&amp;gt; &amp;lt;input class=&amp;#34;email&amp;#34; id=&amp;#34;email&amp;#34; type=&amp;#34;email&amp;#34; name=&amp;#34;email&amp;#34;&amp;gt; &amp;lt;br&amp;gt; &amp;lt;label for=&amp;#34;password&amp;#34;&amp;gt;密碼：&amp;lt;/label&amp;gt; &amp;lt;input class=&amp;#34;password&amp;#34; id=&amp;#34;password&amp;#34; type=&amp;#34;password&amp;#34; name=&amp;#34;password&amp;#34;&amp;gt; &amp;lt;br&amp;gt; &amp;lt;button class=&amp;#34;send&amp;#34; type=&amp;#34;submit&amp;#34;&amp;gt;送出&amp;lt;/button&amp;gt; &amp;lt;!-- 1.帳號輸入：jack@gmail.com --&amp;gt; &amp;lt;!-- 2.密碼輸入：abc123456 --&amp;gt; &amp;lt;!-- 3.點擊送出按鈕 --&amp;gt; &amp;lt;!-- 4.瀏覽器網址列會出現：https://cdpn.io/pen/debug/index.html?account=jack&amp;amp;password=abc123456--&amp;gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 let send = document.</description>
    </item>
    
    <item>
      <title>【JS】發送AJAX請求</title>
      <link>https://jack842248.github.io/post/2021-02-09-javascript-%E7%99%BC%E9%80%81ajax%E8%AB%8B%E6%B1%82/</link>
      <pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-09-javascript-%E7%99%BC%E9%80%81ajax%E8%AB%8B%E6%B1%82/</guid>
      <description>動態載入資料(AJAX) 使用new XMLHttpRequest原型，來向伺服器發送請求。 不用重新整理網頁就能取得資料庫回傳的資料，例如 : 加入購物車，顯示商品數量。 註冊帳號時，顯示該帳號是否已使用。 搜尋時，顯示的關鍵提示字。 載入的資料必須支援跨網域(CORS)。 若發送請求時出現Access-Control-Allow-Origin錯誤，代表不支援 1 let xhr = new XMLHttpRequest(); .open(&amp;ldquo;方法&amp;rdquo; , &amp;ldquo;網址&amp;rdquo; , true/false)。 向伺服器發送請求.open(method, url, async, user, password)。 method：請求方法（如 &amp;ldquo;GET&amp;rdquo;、&amp;ldquo;POST&amp;rdquo;、&amp;ldquo;PUT&amp;rdquo;、&amp;ldquo;DELETE&amp;rdquo; 等） url：請求的 URL 地址，可以是相對路徑或絕對路徑。 async(可選)：是否異步執行請求，預設為 true。如果設定為 false，請求會同步執行，頁面會被阻塞，直到請求完成。一般建議使用異步請求。 user(可選)：HTTP 請求的使用者名稱，用於需要身份驗證的請求。 password(可選)：HTTP 請求的密碼，用於需要身份驗證的請求。 請求方法 說明 &amp;ldquo;GET&amp;rdquo; 用於請求數據。通常用於獲取資源。 &amp;ldquo;POST&amp;rdquo; 用於將數據發送到伺服器。例如，提交表單或上傳數據。 &amp;ldquo;PUT&amp;rdquo; 用於更新伺服器上的資源。 &amp;ldquo;DELETE&amp;rdquo; 用於刪除伺服器上的資源。 &amp;ldquo;PATCH&amp;rdquo; 用於更新部分資源，類似於 PUT，但只更新部分內容。 &amp;ldquo;HEAD&amp;rdquo; 與 GET 類似，但不返回回應體，僅返回回應頭部信息。 &amp;ldquo;OPTIONS&amp;rdquo; 用於查詢伺服器支持哪些請求方法和其他配置。 &amp;ldquo;TRACE&amp;rdquo; 用於追蹤請求和回應的路徑，通常很少使用。 &amp;ldquo;CONNECT&amp;rdquo; 用於建立到目標伺服器的隧道連接，常用於代理伺服器。 1 2 3 4 5 6 7 let xhr = new XMLHttpRequest(); //true(預設)，不等資料載入完就會往下執行(非同步載入) xhr.</description>
    </item>
    
    <item>
      <title>【JS】BOM瀏覽器物件</title>
      <link>https://jack842248.github.io/post/2021-02-08-javascript-bom%E7%80%8F%E8%A6%BD%E5%99%A8%E7%89%A9%E4%BB%B6/</link>
      <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-08-javascript-bom%E7%80%8F%E8%A6%BD%E5%99%A8%E7%89%A9%E4%BB%B6/</guid>
      <description>BOM(Browser Object Model) 瀏覽器(window)提供的物件原型。 名稱 中文 history 瀏覽歷史紀錄 frames 框架 location 路徑位置 document DOM元素 screen 使用裝置資訊 navigator 版本資訊 回到上一頁、下一頁 1 2 &amp;lt;button class=&amp;#34;back&amp;#34; type=&amp;#34;button&amp;#34;&amp;gt;回上一頁&amp;lt;/button&amp;gt; &amp;lt;button class=&amp;#34;next&amp;#34; type=&amp;#34;button&amp;#34;&amp;gt;往下一頁&amp;lt;/button&amp;gt; 1 2 3 4 5 6 7 8 9 10 11 12 let back = document.querySelector(&amp;#34;.back&amp;#34;); let next = document.querySelector(&amp;#34;.next&amp;#34;); //點擊&amp;#34;回上一頁&amp;#34;按鈕時 back.addEventListener(&amp;#34;click&amp;#34;,function(){ window.history.back(); }) //點擊&amp;#34;往下一頁&amp;#34;按鈕時 next.addEventListener(&amp;#34;click&amp;#34;,function(){ window.history.forward(); }) 列印 1 &amp;lt;button class=&amp;#34;print&amp;#34; type=&amp;#34;button&amp;#34;&amp;gt;列印&amp;lt;/button&amp;gt; 1 2 3 4 5 let print = document.querySelector(&amp;#34;.print&amp;#34;); print.</description>
    </item>
    
    <item>
      <title>【JS】localStorage</title>
      <link>https://jack842248.github.io/post/2021-02-07-javascript-localstorage/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-07-javascript-localstorage/</guid>
      <description>將input值存入localStorage，再取出 Key Value myName text.value(輸入框裡的值) 1 2 3 &amp;lt;input class=&amp;#34;text&amp;#34; type=&amp;#34;text&amp;#34;&amp;gt; &amp;lt;button class=&amp;#34;save&amp;#34; type=&amp;#34;button&amp;#34;&amp;gt;儲存資料&amp;lt;/button&amp;gt; &amp;lt;button class=&amp;#34;call&amp;#34; type=&amp;#34;button&amp;#34;&amp;gt;呼叫資料&amp;lt;/button&amp;gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 let text = document.querySelector(&amp;#34;.text&amp;#34;); let save = document.querySelector(&amp;#34;.save&amp;#34;); let call = document.querySelector(&amp;#34;.call&amp;#34;); //點擊「儲存資料」按鈕 save.addEventListener(&amp;#34;click&amp;#34;,function(){ //儲存資料，(要存入的值是什麼標題，存入什麼值) localStorage.setItem(&amp;#34;myName&amp;#34;,text.value); }) //點擊「呼叫資料」按鈕 call.addEventListener(&amp;#34;click&amp;#34;,function(){ //設定變數=localStorage的myName的值 let str = localStorage.getItem(&amp;#34;myName&amp;#34;); //彈跳出資料 alert(str); }) 將JSON資料存入localStorage，再取出 Key Value fruitName {name: &amp;ldquo;蘋果&amp;rdquo;,price: 15} 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 let fruitsData = [ { name: &amp;#34;蘋果&amp;#34;, price: 15 } ] //存入&amp;#34;字串&amp;#34;資料 let fruitStr = JSON.</description>
    </item>
    
    <item>
      <title>【JS】event使用者事件</title>
      <link>https://jack842248.github.io/post/2021-02-06-javascript-event%E4%BD%BF%E7%94%A8%E8%80%85%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-06-javascript-event%E4%BD%BF%E7%94%A8%E8%80%85%E4%BA%8B%E4%BB%B6/</guid>
      <description>監聽點擊事件(事件氣泡) addEventListener(事件,一組動作,false) 若同時有多個監聽事件，先執行點擊目標在執行外層 1 &amp;lt;button class=&amp;#34;btn&amp;#34; type=&amp;#34;button&amp;#34;&amp;gt;按鈕&amp;lt;/button&amp;gt; 1 2 3 4 5 6 7 8 9 10 let btn = document.querySelector(&amp;#34;.btn&amp;#34;); let body = document.body; btn.addEventListener(&amp;#34;click&amp;#34;,function(){ console.log(&amp;#34;你點到按鈕&amp;#34;); },false); body.addEventListener(&amp;#34;click&amp;#34;,function(){ console.log(&amp;#34;你點到body&amp;#34;); },false); 結果：&amp;quot;你點到按鈕&amp;quot;，&amp;quot;你點到body&amp;quot;
監聽點擊事件(事件捕捉) addEventListener(事件,一組動作,true) 若同時有多個監聽事件，先執行外層在執行點擊目標 1 &amp;lt;button class=&amp;#34;btn&amp;#34; type=&amp;#34;button&amp;#34;&amp;gt;按鈕&amp;lt;/button&amp;gt; 1 2 3 4 5 6 7 8 9 10 let btn = document.querySelector(&amp;#34;.btn&amp;#34;); let body = document.body; btn.addEventListener(&amp;#34;click&amp;#34;,function(){ console.log(&amp;#34;你點到按鈕&amp;#34;); },true); body.addEventListener(&amp;#34;click&amp;#34;,function(){ console.log(&amp;#34;你點到body&amp;#34;); },true); 結果：&amp;quot;你點到body&amp;quot;，&amp;quot;你點到按鈕&amp;quot;
監聽點擊事件 + 阻止事件冒泡 addEventListener第三個參數預設是false，表示“事件從元素內開始往外發生” 當我點擊「按鈕」時會出現“蘋果”，後面body也會執行並出現“香蕉” 但如果加上stopPropagation之後，可以成功阻止事件冒泡，body不會執行 1 &amp;lt;button class=&amp;#34;btn&amp;#34; type=&amp;#34;button&amp;#34;&amp;gt;按鈕&amp;lt;/button&amp;gt; 1 2 3 4 5 6 7 8 9 10 11 12 let btn = document.</description>
    </item>
    
    <item>
      <title>【JS】for迴圈</title>
      <link>https://jack842248.github.io/post/2021-02-05-javascript-for%E8%BF%B4%E5%9C%88/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-05-javascript-for%E8%BF%B4%E5%9C%88/</guid>
      <description>for 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 //初始狀態;條件;每次執行 for(let i=0 ; i&amp;lt;3 ; i++){ console.log(&amp;#34;我會被執行&amp;#34;+i+&amp;#34;次&amp;#34;); //&amp;#34;我會被執行0次&amp;#34; //&amp;#34;我會被執行1次&amp;#34; //&amp;#34;我會被執行2次&amp;#34; } //99乘法表 for(let i=2 ; i&amp;lt;10 ; i++){ console.log(i+&amp;#39;*&amp;#39;+i+&amp;#39;=&amp;#39;+i*i); } //&amp;#34;2*2=4&amp;#34; //&amp;#34;3*3=9&amp;#34; //&amp;#34;4*4=16&amp;#34; //&amp;#34;5*5=25&amp;#34; //&amp;#34;6*6=36&amp;#34; //&amp;#34;7*7=49&amp;#34; //&amp;#34;8*8=64&amp;#34; //&amp;#34;9*9=81&amp;#34; i=i+1等於i+=1等於i++
for + json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 let fruitsData = [ { name: &amp;#34;蘋果&amp;#34;, price: 15 }, { name: &amp;#34;香蕉&amp;#34;, price: 25 }, { name: &amp;#34;鳳梨&amp;#34;, price: 35 } ] //列印出每一項水果 for(let i=0 ; i&amp;lt;fruitsData.</description>
    </item>
    
    <item>
      <title>【JS】改變DOM元素</title>
      <link>https://jack842248.github.io/post/2021-02-04-javascript-%E6%94%B9%E8%AE%8Adom%E5%85%83%E7%B4%A0/</link>
      <pubDate>Thu, 04 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-04-javascript-%E6%94%B9%E8%AE%8Adom%E5%85%83%E7%B4%A0/</guid>
      <description>點擊按鈕 + 改變標籤結構(innerHTML、prepend、append) 1 2 3 4 &amp;lt;button class=&amp;#34;btn&amp;#34; type=&amp;#34;button&amp;#34;&amp;gt;按鈕&amp;lt;/button&amp;gt; &amp;lt;ul class=&amp;#34;list&amp;#34;&amp;gt; &amp;lt;li&amp;gt;蘋果&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 let btn = document.querySelector(&amp;#34;.btn&amp;#34;); let list = document.querySelector(&amp;#34;.list&amp;#34;); //替換&amp;#34;蘋果&amp;#34; btn.onclick = function(){ list.innerHTML = &amp;#34;&amp;lt;li&amp;gt;香蕉&amp;lt;/li&amp;gt;&amp;#34;; } //加在&amp;#34;蘋果&amp;#34;前面 btn.onclick = function(){ let banana = document.createElement(&amp;#34;li&amp;#34;); banana.textContent = &amp;#34;香蕉&amp;#34;; list.prepend(banana); } //加在&amp;#34;蘋果&amp;#34;後面 btn.onclick = function(){ let banana = document.</description>
    </item>
    
    <item>
      <title>【JS】抓取DOM元素</title>
      <link>https://jack842248.github.io/post/2021-02-03-javascript-%E6%8A%93%E5%8F%96dom%E5%85%83%E7%B4%A0/</link>
      <pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-03-javascript-%E6%8A%93%E5%8F%96dom%E5%85%83%E7%B4%A0/</guid>
      <description>取得DOM元素方法 方法 取得目標 回傳結果 .getElementById() id 第一個符合的標籤 .getElementsByName() name 物件 .getElementsByTagName() &amp;lt;標籤&amp;gt; 物件 .querySelector() id、class、&amp;lt;標籤&amp;gt; 第一個符合的標籤 .querySelectorAll() id、class 物件 抓取id元素 1 &amp;lt;div id=&amp;#34;apple&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 1 2 3 4 5 let apple = document.getElementById(&amp;#34;apple&amp;#34;); console.log(apple); //&amp;lt;div id=&amp;#34;apple&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; apple.textContent = &amp;#34;蘋果&amp;#34;; 抓取name元素 1 &amp;lt;div name=&amp;#34;apple&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 1 2 3 4 5 let apple = document.getElementsByName(&amp;#34;apple&amp;#34;); console.log(typeof(apple)); //object apple[0].textContent = &amp;#34;蘋果&amp;#34;; 抓取tag標籤 1 &amp;lt;button type=&amp;#34;button&amp;#34;&amp;gt;按鈕&amp;lt;/button&amp;gt; 1 2 3 4 5 let btn = document.getElementsByTagName(&amp;#34;button&amp;#34;); console.</description>
    </item>
    
    <item>
      <title>【JS】判斷式</title>
      <link>https://jack842248.github.io/post/2021-02-02-javascript-%E5%88%A4%E6%96%B7%E5%BC%8F/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-02-javascript-%E5%88%A4%E6%96%B7%E5%BC%8F/</guid>
      <description>運算子 運算子 口語化說明 = 賦予 == 等於 === 等於(嚴謹模式) != 不等於 !== 不等於(嚴謹模式) true 是;成立 false 不是;不成立 &amp;gt; 大於 &amp;lt; 小於 &amp;gt;= 大於等於 &amp;lt;= 小於等於 &amp;amp;&amp;amp; 以及(and) ｜｜ 或是(or) ! 反轉true或false(not) 1 2 3 4 5 6 console.log(1 === &amp;#34;1&amp;#34;); //false console.log(1 === 1); //true console.log(1 != &amp;#34;1&amp;#34;); //false console.log(1 !== 1); //true console.log(true == &amp;#34;1&amp;#34;); //true console.log(true === &amp;#34;1&amp;#34;); //false 在javascript裡：1是true、0是false
if、else、else if 適合判斷式數值，限制範圍。 一律使用 if 開頭，若不成立，則往下執行。 可以使用多個 else if ，若不成立，則往下執行。 若以上都不成立則執行 else 。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //飢餓程度：1~10 let hungry = 8; function eat(item){ console.</description>
    </item>
    
    <item>
      <title>【JS】變數與函式</title>
      <link>https://jack842248.github.io/post/2021-02-01-javascript-%E8%AE%8A%E6%95%B8/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-01-javascript-%E8%AE%8A%E6%95%B8/</guid>
      <description>宣告變數 |變數|說明|修改| |&amp;mdash;|&amp;mdash;| |var|在{}裡宣告變數，會影響全域變數(window)|可以被修改| |let|在{}裡宣告變數，只存留在{}裡|可以被修改| |const|在{}裡宣告變數，只存留在{}裡|不能被修改，但物件和陣列除外|
使用Object.freeze()，括弧裡面放const宣告的物件可以凍結
1 2 let apple = &amp;#34;蘋果&amp;#34;; //宣告變數 變數名稱 = 賦予的值; 宣告的變數會儲存在window裡
區域變數(Area Variable) 1 2 3 4 5 6 function sayApple(){ let apple = &amp;#34;蘋果&amp;#34;; console.log(apple); //蘋果 } sayApple(); console.log(apple); //undefined function()執行完後，宣告也會跟著結束
全域變數(Global Variable) 1 2 3 4 5 6 let apple; function sayApple(){ apple = &amp;#34;蘋果&amp;#34;; } sayApple(); console.log(apple); //蘋果 若要讓function()執行完後，取得變數，則在function外先做宣告
函式 1 2 3 4 5 6 7 8 9 function sayHi(){ console.</description>
    </item>
    
    <item>
      <title>【JS】Chrome Devtools</title>
      <link>https://jack842248.github.io/post/2021-01-24-javascript-chrome-devtools/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-24-javascript-chrome-devtools/</guid>
      <description>對著圖片→&amp;quot;右鍵&amp;quot;→&amp;quot;複製圖片位置&amp;quot;。可複製該圖片的路徑，貼到src上。 對著連結→&amp;quot;右鍵&amp;quot;→&amp;quot;複製連結網址&amp;quot;。可複製該連結的路徑，貼到href上。 開啟Chrome開發者工具:打開Chrome瀏覽器→&amp;quot;右鍵&amp;quot;→&amp;quot;檢查&amp;quot;。 Dock side : 可以設定開發者人員工具的方向、或獨立式窗。 Toggle Device Toolbar : 切換手機或平板螢幕大小來瀏覽網頁。 Select an element in the page to inspect it : 可以尋找網頁上的元素。 在[Elements]使用ctrl+F可搜尋HTML標籤、class名稱，找到的會被highlight。 在[Elements]使用styles的Fliter，可搜尋css屬性名稱。 在[Elements]使用styles的:hov，可查看元素在:hover時的狀態。 在[Elements]使用styles的視窗中，transform、animation可查看貝茲控制點的曲線。 1 2 // &amp;lt;-----css-----&amp;gt; transition: 1s cubic-bezier(.17,.67,.83,.67) 點擊&amp;quot;&amp;hellip;&amp;ldquo;→&amp;quot;Show console drawer&amp;quot;→點擊裡面的&amp;rdquo;&amp;hellip;&amp;ldquo;→&amp;quot;Animations&amp;quot;→點擊圖片:可以查看animation的時間軸，選擇10%可以觀看慢速。 在[network]，重新整理頁面後，可在最底下查看狀態:
requests(請求): 請求回傳的檔案數量。
transferred(轉移): 壓縮過後的流量。
resources(資源): 未壓縮過的總資源。
Finish(結束): 整體包含ajax動態載入的時間。
Load(加載): 靜態檔案載入的時間。
在[network]，可按&amp;quot;Throttling小箭頭&amp;quot;按鈕 : 可以模擬其他頻寬的速度。 在[Console]，直接撰寫console.log() : 可以顯示結果。 在[Console]，直接撰寫console.table() : 放入物件或陣列，可以表格方式查看。 在[Console]，直接撰寫console.time()、console.timeEnd() : 可以計算時間。 1 2 3 4 5 6 7 8 // &amp;lt;-----js-----&amp;gt; console.</description>
    </item>
    
  </channel>
</rss>
