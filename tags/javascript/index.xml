<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on Jack Huang Blog</title>
    <link>https://jack842248.github.io/tags/javascript/</link>
    <description>Recent content in javascript on Jack Huang Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>jack842248@gmail.com (JackHuang)</managingEditor>
    <webMaster>jack842248@gmail.com (JackHuang)</webMaster>
    <lastBuildDate>Mon, 25 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jack842248.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Javascript小知識2</title>
      <link>https://jack842248.github.io/post/2021-01-25-javascript%E5%B0%8F%E7%9F%A5%E8%AD%982/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-25-javascript%E5%B0%8F%E7%9F%A5%E8%AD%982/</guid>
      <description>陳述式(Statement)  不會回傳結果，不能賦值到變數上。     陳述式 例如     判斷式 if、else if、else、switch、break   宣告變數 var、let、const   函式陳述式 function fn1(){&amp;hellip;}   區塊 {}   迴圈 for   回傳 return     1 2 3 4 5 6 7 8 9 10 11 12 13  //判斷式 if(a == 1){...} //宣告變數 var a; //函式陳述式 function fn1(){...} //block區塊 { let a = 1; }    表達式(Expression)  又稱表示式、運算式。 會運算及回傳結果。     表達式 例如     函式表達式 var fn1 = function(){&amp;hellip;}   物件實字 {a:1}   一元運算式 只需要一個運算元   二元運算式 兩個運算元，一個運算子   三元運算式 三個運算元，兩個運算子     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  /** 函式表達式 **/ var fn1 = function(){.</description>
    </item>
    
    <item>
      <title>Javascript小知識1</title>
      <link>https://jack842248.github.io/post/2021-01-24-javascript%E5%B0%8F%E7%9F%A5%E8%AD%981/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-24-javascript%E5%B0%8F%E7%9F%A5%E8%AD%981/</guid>
      <description>程式語言可以分為兩種:
編譯式語言(Compiled Language)    例如 Java、C、C#、C++、Pascal     流程 原始碼 → 預處理器 → 代碼生成 → 執行   特性 效能比較好、除錯比較快、程式碼可獨立執行。    直譯式語言(Interpreted Language)    例如 JavaScript、Python、PHP、Ruby、BASIC、LISP、Perl、R     流程 原始碼 → 直譯器 → 代碼生成 → 執行   特性 程式碼由上到下執行，效能比較差、除錯比較慢、需要依賴執行環境。     作用域可分為兩種:
動態作用域(Dynamic Scope)  特性 : 作用域在函式調用時才決定。  靜態作用域(Lexical Scope)  又稱 : 語法作用域。 特性 : 語法在解析時就決定作用域，而且不再改變。  1 2 3 4 5 6 7  function fn1(){ var a = 1; } fn1(); console.</description>
    </item>
    
  </channel>
</rss>
