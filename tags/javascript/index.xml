<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Jack Huang Blog</title>
    <link>https://jack842248.github.io/tags/javascript/</link>
    <description>Recent content in JavaScript on Jack Huang Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>jack842248@gmail.com (JackHuang)</managingEditor>
    <webMaster>jack842248@gmail.com (JackHuang)</webMaster>
    <lastBuildDate>Wed, 24 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jack842248.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript—封裝AJAX請求</title>
      <link>https://jack842248.github.io/post/2021-02-24-javascript%E5%B0%81%E8%A3%9Dajax%E8%AB%8B%E6%B1%82/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-24-javascript%E5%B0%81%E8%A3%9Dajax%E8%AB%8B%E6%B1%82/</guid>
      <description>建立Promise Promise 是一個函式物件，需要用函式來建構。
PromiseState : 狀態。
PromiseValue : 回傳的值。
需要帶入兩個參數 resolve : 成功， reject : 失敗。
在 *非同步事件 之後才會執行結果。
需要用 .then() : 顯示成功的結果， catch() : 顯示失敗的結果。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 function promiseFn(item){ //1. return new Promise((resolve,reject)=&amp;gt;{ //2. setTimeout(()=&amp;gt;{ //3. if(item){ resolve(&amp;#34;成功&amp;#34;); }else{ reject(&amp;#34;失敗&amp;#34;); } },1000) }) } promiseFn(1) .then((res)=&amp;gt;{ //4. console.log(res); }) .catch((rej)=&amp;gt;{ //4. console.log(rej); }) 用.</description>
    </item>
    
    <item>
      <title>JavaScript—操作Array方法</title>
      <link>https://jack842248.github.io/post/2021-02-23-javascript%E6%93%8D%E4%BD%9Carray%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 23 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-23-javascript%E6%93%8D%E4%BD%9Carray%E6%96%B9%E6%B3%95/</guid>
      <description>新增陣列 .push (要新增的東西)，新增到陣列最後方。 1 2 3 let a = [&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;]; a.push(&amp;#34;芭樂&amp;#34;); console.log(a); //[&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;,&amp;#34;芭樂&amp;#34;] .unshift (要新增的東西)，新增到陣列最前方。 1 2 3 let a = [&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;]; a.unshift(&amp;#34;芭樂&amp;#34;); console.log(a); //[&amp;#34;芭樂&amp;#34;,&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;] .concat (要新增的東西)，新增到陣列最後方。 1 2 3 let a = [&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;]; let b = a.concat(&amp;#34;芭樂&amp;#34;); console.log(b); //[&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;,&amp;#34;芭樂&amp;#34;] 刪除陣列 .pop() ，刪除陣列最後一項。 1 2 3 let a = [&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;]; a.pop(); console.log(a); //[&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;] .shift() ，刪除陣列第一項。 1 2 3 let a = [&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;]; a.shift(); console.log(a); //[&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;] .splice (從第幾項開始刪除,刪到第幾項)。 1 2 3 let a = [&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;]; a.</description>
    </item>
    
    <item>
      <title>Chrome devtools除錯</title>
      <link>https://jack842248.github.io/post/2021-02-22-javascriptchrome-devtools/</link>
      <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-22-javascriptchrome-devtools/</guid>
      <description>對著圖片→&amp;quot;右鍵&amp;quot;→&amp;quot;複製圖片位置&amp;quot;。可複製該圖片的路徑，貼到src上。 對著連結→&amp;quot;右鍵&amp;quot;→&amp;quot;複製連結網址&amp;quot;。可複製該連結的路徑，貼到href上。 開啟Chrome開發者工具:打開Chrome瀏覽器→&amp;quot;右鍵&amp;quot;→&amp;quot;檢查&amp;quot;。 Dock side : 可以設定開發者人員工具的方向、或獨立式窗。 Toggle Device Toolbar : 切換手機或平板螢幕大小來瀏覽網頁。 Select an element in the page to inspect it : 可以尋找網頁上的元素。 在[Elements]使用ctrl+F可搜尋HTML標籤、class名稱，找到的會被highlight。 在[Elements]使用styles的Fliter，可搜尋css屬性名稱。 在[Elements]使用styles的:hov，可查看元素在:hover時的狀態。 在[Elements]使用styles的視窗中，transform、animation可查看貝茲控制點的曲線。 1 2 // &amp;lt;-----css-----&amp;gt; transition: 1s cubic-bezier(.17,.67,.83,.67) 點擊&amp;quot;&amp;hellip;&amp;ldquo;→&amp;quot;Show console drawer&amp;quot;→點擊裡面的&amp;rdquo;&amp;hellip;&amp;ldquo;→&amp;quot;Animations&amp;quot;→點擊圖片:可以查看animation的時間軸，選擇10%可以觀看慢速。 在[network]，重新整理頁面後，可在最底下查看狀態:
requests(請求): 請求回傳的檔案數量。
transferred(轉移): 壓縮過後的流量。
resources(資源): 未壓縮過的總資源。
Finish(結束): 整體包含ajax動態載入的時間。
Load(加載): 靜態檔案載入的時間。
在[network]，可按&amp;quot;Throttling小箭頭&amp;quot;按鈕 : 可以模擬其他頻寬的速度。 在[Console]，直接撰寫console.log() : 可以顯示結果。 在[Console]，直接撰寫console.table() : 放入物件或陣列，可以表格方式查看。 在[Console]，直接撰寫console.time()、console.timeEnd() : 可以計算時間。 1 2 3 4 5 6 7 8 // &amp;lt;-----js-----&amp;gt; console.</description>
    </item>
    
    <item>
      <title>JavaScript—Google Maps API</title>
      <link>https://jack842248.github.io/post/2021-02-21-javascriptgoogle-maps-api/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-21-javascriptgoogle-maps-api/</guid>
      <description>應用程式介面(Application Programming Interface) 簡稱API。 應用程式提供的服務，用來接收或傳送資料給應用程式。例如 :
Heroku，主機服務。
GoogleMap，地圖導覽服務。
Firebase，資料庫服務
Google Map API 在Google雲端平台創建一個帳戶(需綁定一張信用卡)。(不會自動收取費用，除非手動升級) 在雲端平台上建立一個專案。 點擊&amp;quot;地圖管理&amp;quot;→&amp;quot;CREATE NEW MAP ID&amp;quot;，新建一個ID。 點擊&amp;quot;地圖樣式&amp;quot;→&amp;quot;CREATE NEW MAP STYLE&amp;quot;，新建一個地圖樣式。 點擊&amp;quot;解決方案建構工具&amp;quot;→&amp;quot;將程式碼複製到剪貼簿&amp;quot;。 貼到編輯器上，開始建置地圖。 初始化地圖 以夢時代為顯示中心。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // &amp;lt;-----html-----&amp;gt; div#map script(src=&amp;#34;https://maps.googleapis.com/maps/api/js?key={{{API金鑰}}}&amp;amp;callback=initMap&amp;amp;libraries=&amp;amp;v=weekly&amp;#34; defer) // &amp;lt;-----css-----&amp;gt; #map height: 100% html,body height: 100% margin: 0 padding: 0 // &amp;lt;-----js-----&amp;gt; function initMap(){ //初始化 const map = new google.</description>
    </item>
    
    <item>
      <title>JavaScript—發送AJAX請求</title>
      <link>https://jack842248.github.io/post/2021-02-20-javascript%E7%99%BC%E9%80%81ajax%E8%AB%8B%E6%B1%82/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-20-javascript%E7%99%BC%E9%80%81ajax%E8%AB%8B%E6%B1%82/</guid>
      <description>動態載入資料(AJAX) 使用 new XMLHttpRequest 原型，來向伺服器發送請求。 不用重新整理網頁就能取得資料庫回傳的資料，例如 :
加入購物車，顯示商品數量。
註冊帳號時，顯示該帳號是否已使用。
搜尋時，顯示的關鍵提示字。
載入的資料必須支援跨網域(CORS)。 跨域資源共享(Cross-Origin Resource Sharing) 簡稱CORS。 若發送請求時出現 Access-Control-Allow-Origin 錯誤，代表不支援。 可以使用 test-cors.org 網站，顯示http狀態碼。
.status:200，資料載入成功，用戶端要求成功。
.status:404，資料載入失敗，找不到。
.open(&amp;ldquo;方法&amp;rdquo; , &amp;ldquo;網址&amp;rdquo; , frue/false)。 向伺服器發送請求。 true(非同步)，不等資料載入完就會往下執行。(預設) false(同步)，等待資料載入完後才往下執行。 方法 GET POST PUT DELETE 說明 取得資料 傳送資料 覆蓋資料 刪除資料 .setRequestHeader 決定傳送給伺服器的資料格式。 .setRequestHeader(&amp;ldquo;content-type&amp;rdquo;,&amp;ldquo;application/x-www-form-urlencoded&amp;rdquo;)，傳送表單格式。 .setRequestHeader(&amp;ldquo;content-type&amp;rdquo;,&amp;ldquo;application/json&amp;rdquo;)，傳送JSON格式。 .send 傳送給伺服器&amp;quot;字串&amp;quot;格式的資料。 使用 JSON.stringify() ，將資料轉換成字串。 .onload 執行ajax完成後的動作。 .responseText 可以取得伺服器回傳的&amp;quot;字串&amp;quot;格式的資料。 使用 JSON.parse() ，來解析回傳的資料。 載入資料 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // &amp;lt;-----html-----&amp;gt; p // &amp;lt;-----js-----&amp;gt; let xhr = new XMLHttpRequest(); //0 xhr.</description>
    </item>
    
    <item>
      <title>JavaScript—瀏覽器物件模型</title>
      <link>https://jack842248.github.io/post/2021-02-19-javascript%E7%80%8F%E8%A6%BD%E5%99%A8%E7%89%A9%E4%BB%B6%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-19-javascript%E7%80%8F%E8%A6%BD%E5%99%A8%E7%89%A9%E4%BB%B6%E6%A8%A1%E5%9E%8B/</guid>
      <description>BOM(Browser Object Model) 瀏覽器(window)提供的物件原型。 名稱 中文 history 瀏覽歷史紀錄 frames 框架 location 路徑位置 document DOM元素 screen 使用裝置資訊 navigator 版本資訊 回上頁 使用window.history.forward()，下一頁。 使用window.history.back()，回上頁。 回上頁前必須先下一頁
1 2 3 4 5 6 7 8 9 10 11 12 13 14 // &amp;lt;-----html-----&amp;gt; button.nextBtn 下一頁 button.backBtn 回上頁 // &amp;lt;-----js-----&amp;gt; let nextBtn = document.querySelector(&amp;#34;.nextBtn&amp;#34;); let backBtn = document.querySelector(&amp;#34;.backBtn&amp;#34;); nextBtn.onclick = function(){ window.history.forward(); } backBtn.onclick = function(){ window.history.back(); } 列印 1 2 3 4 5 6 7 8 9 // &amp;lt;-----html-----&amp;gt; button.</description>
    </item>
    
    <item>
      <title>localStorage與todolist</title>
      <link>https://jack842248.github.io/post/2021-02-18-javascripttodolist/</link>
      <pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-18-javascripttodolist/</guid>
      <description>瀏覽器資料儲存(LocalStorage) 可以將&amp;quot;字串&amp;quot;資料儲存在 Chrome → Application → LocalStorage 裡。 Key Value &amp;mdash; &amp;mdash; 使用 .setItem 、 .getItem 來存取資料。 1 2 3 4 5 6 /** 存入資料 **/ localStorage.setItem(&amp;#34;a&amp;#34;,&amp;#34;蘋果&amp;#34;); /** 取出資料 **/ let a = localStorage.getItem(&amp;#34;a&amp;#34;); console.log(a); //蘋果 Key Value a 蘋果 localStorage + input 將輸入框裡的值存入後再取出。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // &amp;lt;-----html-----&amp;gt; input(type=&amp;#34;text&amp;#34;) button.setBtn 儲存資料 button.</description>
    </item>
    
    <item>
      <title>JavaScript—使用者事件</title>
      <link>https://jack842248.github.io/post/2021-02-17-javascript%E4%BD%BF%E7%94%A8%E8%80%85%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-17-javascript%E4%BD%BF%E7%94%A8%E8%80%85%E4%BA%8B%E4%BB%B6/</guid>
      <description>點擊事件(Click Event) .onclick = function(){&amp;hellip;} 。 直接在DOM元素上 onclick=&amp;quot;&amp;hellip;&amp;quot; (不建議使用)。 .addEventListener(&amp;ldquo;click&amp;rdquo;,function(){&amp;hellip;}) 。 .onclick只能綁定最後一次事件，.addEventListener可以綁定多次事件，
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // &amp;lt;-----html-----&amp;gt; button.btn1 按鈕1 button.btn2(onclick=&amp;#34;console.log(&amp;#39;您點擊了，按鈕2&amp;#39;)&amp;#34;) 按鈕2 button.btn3 按鈕3 // &amp;lt;-----js-----&amp;gt; let btn1 = document.querySelector(&amp;#34;.btn1&amp;#34;); let btn3 = document.querySelector(&amp;#34;.btn3&amp;#34;); btn1.onclick = function(){ console.log(&amp;#34;您點擊了，按鈕1&amp;#34;); } btn3.addEventListener(&amp;#34;click&amp;#34;,function(){ console.log(&amp;#34;您點擊了，按鈕3&amp;#34;); }); 監聽事件(Listener Event) .addEventListener (&amp;ldquo;事件&amp;rdquo;,&amp;ldquo;方法&amp;rdquo;,false/true)。 事件名稱 監控 例如 click 滑鼠點擊時 change 值被切換時 下拉選單 keydown 按下鍵盤時 mousemove 移動滑鼠時 focus 進入焦點時 輸入框 blur 離開焦點時 輸入框 mouseenter 游標進入時 mouseleave 游標離開時 事件冒泡(Event Bubbling) .</description>
    </item>
    
    <item>
      <title>JavaScript—文件物件模型</title>
      <link>https://jack842248.github.io/post/2021-02-16-javascript%E6%96%87%E4%BB%B6%E7%89%A9%E4%BB%B6%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-16-javascript%E6%96%87%E4%BB%B6%E7%89%A9%E4%BB%B6%E6%A8%A1%E5%9E%8B/</guid>
      <description>取得DOM元素方法 方法 取得目標 得到結果 .getElementById() id 只能取得一個 .getElementsByName() name 以陣列形式呈現 .getElementsByTagName() &amp;lt;標籤&amp;gt; 以陣列形式呈現 .querySelector() id、class、&amp;lt;標籤&amp;gt; 只能取得一個 .querySelectorAll() id、class 以陣列形式呈現 .getElementById() 1 2 3 4 5 6 7 // &amp;lt;-----html-----&amp;gt; #a 蘋果 #a 香蕉 // &amp;lt;-----js-----&amp;gt; let a = document.getElementById(&amp;#34;a&amp;#34;); console.log(a); //&amp;lt;div id=&amp;#39;a&amp;#39;&amp;gt;蘋果&amp;lt;/div&amp;gt; .getElementsByName() 1 2 3 4 5 6 7 8 // &amp;lt;-----html-----&amp;gt; div(name=&amp;#34;a&amp;#34;) 蘋果 div(name=&amp;#34;a&amp;#34;) 香蕉 // &amp;lt;-----js-----&amp;gt; let a = document.getElementsByName(&amp;#34;a&amp;#34;); console.log(a[0]); //&amp;lt;div id=&amp;#39;a&amp;#39;&amp;gt;蘋果&amp;lt;/div&amp;gt; console.log(a[1]); //&amp;lt;div id=&amp;#39;a&amp;#39;&amp;gt;香蕉&amp;lt;/div&amp;gt; .</description>
    </item>
    
    <item>
      <title>JavaScript—變數與作用域</title>
      <link>https://jack842248.github.io/post/2021-02-15-javascript%E8%AE%8A%E6%95%B8%E8%88%87%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-15-javascript%E8%AE%8A%E6%95%B8%E8%88%87%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
      <description>全域變數(Global Variable) 在function裡的變數稱為，區域變數。(範例一) 區域變數(Area Variable) 在function外的變數稱為，全域變數。(範例二) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 /** 範例一 **/ function fn1(){ let a = &amp;#34;蘋果&amp;#34;; console.log(a); //蘋果 } fn1(); /** 範例二 **/ let a; function fn1(){ a = &amp;#34;蘋果&amp;#34;; } fn1(); console.log(a); //蘋果 if、else if、else 適合判斷式數值，限制範圍。 一律使用 if 開頭，若不成立，則往下執行。 可以使用多個 else if ，若不成立，則往下執行。 若以上都不成立則執行 else 。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 let hungry = 5; //飢餓程度1~10 function eat(food){ console.</description>
    </item>
    
    <item>
      <title>JavaScript—ES6</title>
      <link>https://jack842248.github.io/post/2021-01-30-javascriptecmascript6/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-30-javascriptecmascript6/</guid>
      <description>var、let、const 皆為宣告變數用。 名稱 var let const 作用域 在window、函式 在block{}裡 在block{}裡 宣告的變數 可以賦予新的值 可以賦予新的值 不能賦予新的值 重複宣告變數時 不會出錯 會出錯 會出錯 從創造到執行階段會 提升(Hoisting) 暫時性死區(TDZ) 會出現錯誤 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 /** 變數賦予新的值 **/ var a = 1; a = 2; console.log(a); //2 let b = 1; b = 2; console.</description>
    </item>
    
    <item>
      <title>JavaScript—屬性特徵與特性</title>
      <link>https://jack842248.github.io/post/2021-01-29-javascript%E5%B1%AC%E6%80%A7%E7%89%B9%E5%BE%B5%E8%88%87%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-29-javascript%E5%B1%AC%E6%80%A7%E7%89%B9%E5%BE%B5%E8%88%87%E7%89%B9%E6%80%A7/</guid>
      <description>Object.defineProperty() 可以調整物件裡的屬性特徵。 帶入的值 名稱 中文 預設值 例如 物件 Object &amp;mdash; 屬性 &amp;quot;Attributes&amp;quot; &amp;mdash; 參數a value 屬性的值 &amp;mdash; 參數b writable 可否寫入 true 賦予(=) 參數c configurable 可否被刪除 true delete 參數d enumerable 可否被列舉 true for&amp;hellip;in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 var obj1 = { name:&amp;#34;蘋果&amp;#34;, amount:100 } Object.defineProperty(obj1 , &amp;#34;name&amp;#34; , { value: &amp;#34;香蕉&amp;#34;, writable: true, configurable: true, enumerable: true }); //var obj1 = { // name:&amp;#34;香蕉&amp;#34;, // amount:100 //} /** 如果writable: false **/ obj1.</description>
    </item>
    
    <item>
      <title>JavaScript—原型與建構函式</title>
      <link>https://jack842248.github.io/post/2021-01-28-javascript%E5%8E%9F%E5%9E%8B%E8%88%87%E5%BB%BA%E6%A7%8B%E5%87%BD%E5%BC%8F/</link>
      <pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-28-javascript%E5%8E%9F%E5%9E%8B%E8%88%87%E5%BB%BA%E6%A7%8B%E5%87%BD%E5%BC%8F/</guid>
      <description>原型(Prototype) 純值可用建構式繼承在原型下。 原型可利用建構函式新增屬性。 原型有向上查找屬性的功能，而且屬性是共用的。 原型鍊: 建構式 原型(上層) 原型(上上層) new Object() &amp;mdash; Object new Array() Array Object new Number() Number Object new String() String Object new Boolean() Boolean Object 1 2 3 4 5 6 7 8 9 var a = [1 , 2 , 3]; var b = [4 , 5 , 6]; a.__proto__.getLast = function(){ //在上層[Array]原型上，新增[getLast]屬性 return this[this.length - 1] //回傳[最後一項]陣列 } console.log(b.getLast()); //6 //因為a、b都是在[Array]原型底下，所有都可以使用[getLast]屬性 自訂義原型物件 : __proto__ : 是原型的上層。 prototype : 是原型裡的函式。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 /** 建構[狗]原型 **/ function Dog(name,color,size){ //使用建構函式，建構[Dog]原型 this.</description>
    </item>
    
    <item>
      <title>JavaScript—函式與參數</title>
      <link>https://jack842248.github.io/post/2021-01-27-javascript%E5%87%BD%E5%BC%8F%E8%88%87%E5%8F%83%E6%95%B8/</link>
      <pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-27-javascript%E5%87%BD%E5%BC%8F%E8%88%87%E5%8F%83%E6%95%B8/</guid>
      <description>函式(Function) 是包含{程式碼片段}的物件。 擁有被呼叫、回傳的功能。 函式可細分以下幾種 :
函式陳述式
具名函式。(範例一) 函式表達式
匿名函式。(範例二)
具名函式。(範例三)
具名的函式能夠在函式中被呼叫使用
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 /** 範例一 **/ function fn1(){ console.log(&amp;#34;蘋果&amp;#34;); } fn1(); //執行 /** 範例二 **/ var fn1 = function(){ console.</description>
    </item>
    
    <item>
      <title>JavaScript—物件與陣列</title>
      <link>https://jack842248.github.io/post/2021-01-26-javascript%E7%89%A9%E4%BB%B6%E8%88%87%E9%99%A3%E5%88%97/</link>
      <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-26-javascript%E7%89%A9%E4%BB%B6%E8%88%87%E9%99%A3%E5%88%97/</guid>
      <description>物件實字(Object Literals) 直接撰寫 var obj1 = {&amp;hellip;} 物件。(範例一) 建構物件(Constructor Object) 使用 new Object() 包裹方式建立。(範例二) 1 2 3 4 5 6 7 8 9 10 /** 範例一 **/ var obj1 = { name:&amp;#34;蘋果&amp;#34;, amount: 100 } /** 範例二 **/ var obj1 = new Object(); obj1.name = &amp;#34;蘋果&amp;#34;; obj1.amount = 100; 物件的基本應用方法 : 取值。(範例一) 新增屬性。(範例二) 刪除屬性。(範例三) 新增物件。(範例四) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 var a ={ name:&amp;#34;蘋果&amp;#34;, amount: 100 } /** 範例一 **/ console.</description>
    </item>
    
    <item>
      <title>JavaScript—運算與型別</title>
      <link>https://jack842248.github.io/post/2021-01-25-javascript%E9%81%8B%E7%AE%97%E8%88%87%E5%9E%8B%E5%88%A5/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-25-javascript%E9%81%8B%E7%AE%97%E8%88%87%E5%9E%8B%E5%88%A5/</guid>
      <description>陳述式(Statement) 不會回傳結果，不能賦值(=)到變數上。 陳述式 例如 判斷式 if、else if、else、switch、break 宣告變數 var、let、const 函式陳述式 function fn1(){&amp;hellip;} Block區塊 {} 1 2 3 4 5 6 7 8 9 10 11 12 13 /** 判斷式 **/ if(...){...}else{...} /** 宣告變數 **/ var a; /** 函式陳述式 **/ function fn1(){...} /** Block區塊 **/ { let a = 1; } 判斷式(if&amp;hellip;else) 判斷式裡如果是 真值(Truthy) ，就會成立。(範例一) 判斷式裡如果是 假值(Falsy) ，就會不成立。(範例二) 判斷值 例如 真值 true 、 1 、 &amp;ldquo;1&amp;rdquo; 、 [] 、 {} 假值 false 、 0 、 &amp;quot;&amp;quot; 、 NaN 、 null 、 undefined 1 2 3 4 5 6 7 8 9 10 11 12 13 /** 範例一 **/ if([]){ console.</description>
    </item>
    
    <item>
      <title>認識JavaScript</title>
      <link>https://jack842248.github.io/post/2021-01-24-%E8%AA%8D%E8%AD%98javascript/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-24-%E8%AA%8D%E8%AD%98javascript/</guid>
      <description>程式語言可以分為兩種 : javascript屬於直譯式語言。 直譯式語言(Interpreted Language) 例如 JavaScript、Python、PHP、Ruby、BASIC、LISP、Perl、R 流程 原始碼 → 直譯器 → 代碼生成 → 執行 特性 程式碼由上到下執行，效能比較差、除錯比較慢、需要依賴執行環境。 編譯式語言(Compiled Language) 例如 Java、C、C#、C++、Pascal 流程 原始碼 → 預處理器 → 代碼生成 → 執行 特性 效能比較好、除錯比較快、程式碼可獨立執行。 程式語言的作用域可以分為兩種 : javascript屬於靜態作用域。 靜態作用域(Lexical Scope) 又稱 : 語法作用域。 語法在解析時就決定作用域，且不再改變。 1 2 3 4 5 6 function fn1(){ var a = 1; } fn1(); console.log(a); //a is not defined //因為console.log(a)不在function內 動態作用域(Dynamic Scope) 作用域在函式調用時才決定。 程式語言的執行方式可以分為兩種 : javascript屬於單執行緒。 單執行緒(Single Thread) 同步事件會依序執行。 非同步事件會先移到 事件佇列(Event Queue) ，等待其他事件執行完才會執行。</description>
    </item>
    
  </channel>
</rss>
