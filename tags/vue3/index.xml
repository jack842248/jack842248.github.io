<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vue3 on Jack Huang Blog</title>
    <link>https://jack842248.github.io/tags/vue3/</link>
    <description>Recent content in Vue3 on Jack Huang Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>jack842248@gmail.com (JackHuang)</managingEditor>
    <webMaster>jack842248@gmail.com (JackHuang)</webMaster>
    <lastBuildDate>Mon, 09 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://jack842248.github.io/tags/vue3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【Vue3】實作新增或編輯資料</title>
      <link>https://jack842248.github.io/post/2024-12-09-vue3-%E5%AF%A6%E4%BD%9C%E6%96%B0%E5%A2%9E%E6%88%96%E7%B7%A8%E8%BC%AF%E8%B3%87%E6%96%99/</link>
      <pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2024-12-09-vue3-%E5%AF%A6%E4%BD%9C%E6%96%B0%E5%A2%9E%E6%88%96%E7%B7%A8%E8%BC%AF%E8%B3%87%E6%96%99/</guid>
      <description>實作新增或編輯資料 點擊更新，會把輸入框裡的值新增到table 點擊修改，會將資料放到輸入框裡，編輯後，再點擊更新，table資料會被更新 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;form&amp;gt; &amp;lt;label&amp;gt;產品名稱&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; v-model=&amp;#34;temp.name&amp;#34;&amp;gt; &amp;lt;br&amp;gt; &amp;lt;label&amp;gt;產品圖片&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; v-model=&amp;#34;temp.imgUrl&amp;#34;&amp;gt; &amp;lt;br&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; @click=&amp;#34;updateFile&amp;#34;&amp;gt;更新&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;table border&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;標題&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;圖片&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;銷售狀態&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;編輯&amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr v-for=&amp;#34;item in products&amp;#34; :key=&amp;#34;item.id&amp;#34;&amp;gt; &amp;lt;td&amp;gt;{{ item.name }}&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt; &amp;lt;img :src=&amp;#34;item.</description>
    </item>
    
    <item>
      <title>【Vue3】開始使用vue</title>
      <link>https://jack842248.github.io/post/2024-12-08-vue3-%E9%96%8B%E5%A7%8B%E4%BD%BF%E7%94%A8vue/</link>
      <pubDate>Sun, 08 Dec 2024 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2024-12-08-vue3-%E9%96%8B%E5%A7%8B%E4%BD%BF%E7%94%A8vue/</guid>
      <description>創建vue 1 &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;{{ count }}{{ text }}&amp;lt;/div&amp;gt; 1 2 3 4 5 6 7 8 Vue.createApp({ data(){ return{ count: 0, text: &amp;#34;這是一段文字&amp;#34; } } }).mount(&amp;#34;#app&amp;#34;); mount是綁定html顯示位置
顯示結果： 1 &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;0這是一段文字&amp;lt;/div&amp;gt; 資料數字，每次點擊按鈕資料數字+1 1 2 3 4 &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;p&amp;gt;{{ count }}&amp;lt;/p&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; @click=&amp;#34;addCount&amp;#34;&amp;gt;按我&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 const app = { //資料（函式） data(){ return{ count: 0 } }, //生命週期（函式） created(){ this.</description>
    </item>
    
    <item>
      <title>【Vue3】在瀏覽器上運行ES模組</title>
      <link>https://jack842248.github.io/post/2024-12-07-vue3-%E5%9C%A8%E7%80%8F%E8%A6%BD%E5%99%A8%E4%B8%8A%E9%81%8B%E8%A1%8Ces%E6%A8%A1%E7%B5%84/</link>
      <pubDate>Sat, 07 Dec 2024 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2024-12-07-vue3-%E5%9C%A8%E7%80%8F%E8%A6%BD%E5%99%A8%E4%B8%8A%E9%81%8B%E8%A1%8Ces%E6%A8%A1%E7%B5%84/</guid>
      <description>匯入與匯出 預設匯入和匯出 1 2 3 import 自訂名稱 from ... export default = 具名匯入和匯出 1 2 3 import { 具名名稱 } from ... export const xxx = ... 匯入元件 常見的匯出方式，通常用於匯出物件，在 Vue 開發中可用來匯出元件 先建立一個export1.js檔(component) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 export default { data:[ &amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34; ], showData(){ let list = document.</description>
    </item>
    
    <item>
      <title>【Vue3】使用axios串接api</title>
      <link>https://jack842248.github.io/post/2024-12-06-vue3-%E4%BD%BF%E7%94%A8axios%E4%B8%B2%E6%8E%A5api/</link>
      <pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2024-12-06-vue3-%E4%BD%BF%E7%94%A8axios%E4%B8%B2%E6%8E%A5api/</guid>
      <description>axios axios是promise的封裝套件 使用前先在head引入 1 &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 //官方寫法 $.ajax({ url: &amp;#39;https://randomuser.me/api/&amp;#39;, dataType: &amp;#39;json&amp;#39;, success: function(data) { console.log(data); } }); //用axios改寫 axios.get(&amp;#34;https://randomuser.me/api/&amp;#34;) .then(res =&amp;gt; { console.log(res.data.results) }) .catch(err =&amp;gt; { console.log(err.response) }) .response是固定寫法</description>
    </item>
    
    <item>
      <title>【Vue3】promise非同步觀念</title>
      <link>https://jack842248.github.io/post/2024-12-05-vue3-promise%E9%9D%9E%E5%90%8C%E6%AD%A5%E8%A7%80%E5%BF%B5/</link>
      <pubDate>Thu, 05 Dec 2024 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2024-12-05-vue3-promise%E9%9D%9E%E5%90%8C%E6%AD%A5%E8%A7%80%E5%BF%B5/</guid>
      <description>非同步觀念 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 const component = { init(){ console.log(1); getData(); console.log(2); } } function getData(){ setTimeout(()=&amp;gt;{ console.log(&amp;#34;已取得遠端資料&amp;#34;); }) } component.init(); //1 //2 //&amp;#34;已取得遠端資料&amp;#34; 重點結論：非同步事件一定是在事件都執行完之後才執行
promise基本用法 成功：透過resolve回傳結果，使用.then做接收 失敗：透過resolve回傳結果，使用.then和.catch接收 1 2 3 4 5 6 7 8 9 10 11 const promiseSetTimeout = (status) =&amp;gt; { return new Promise((resolve,reject)=&amp;gt;{ setTimeout(()=&amp;gt;{ if(status){ resolve(&amp;#34;promiseSetTimeout 成功&amp;#34;); }else{ reject(&amp;#34;promiseSetTimeout 失敗&amp;#34;); } },0) }) } 基礎應用 1 2 3 4 promiseSetTimeout(true) .</description>
    </item>
    
    <item>
      <title>【Vue3】物件傳參考特性</title>
      <link>https://jack842248.github.io/post/2024-12-04-vue3-%E7%89%A9%E4%BB%B6%E5%82%B3%E5%8F%83%E8%80%83%E7%89%B9%E6%80%A7/</link>
      <pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2024-12-04-vue3-%E7%89%A9%E4%BB%B6%E5%82%B3%E5%8F%83%E8%80%83%E7%89%B9%E6%80%A7/</guid>
      <description>兩個物件互相影響 1 2 3 4 5 6 7 8 9 const fruits = { name: &amp;#34;蘋果&amp;#34;, obj:{} } const fruits2 = fruits; fruits2.name = &amp;#34;香蕉&amp;#34;; console.log(fruits.name); //香蕉 console.log(fruits2.name); //香蕉 當物件賦予到另一個物件時，就等於指向同一個物件
兩個物件互相影響2 1 2 3 4 5 6 7 8 9 10 11 const fruits = { name: &amp;#34;蘋果&amp;#34;, obj:{} } const fn = (item) =&amp;gt; { item.name = &amp;#34;香蕉&amp;#34;; } fn(fruits); console.log(fruits.name); //香蕉 當物件賦予到另一個物件時，就等於指向同一個物件
淺層拷貝(兩物件不影響) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 const fruits = { name: &amp;#34;蘋果&amp;#34;, obj:{} } const fruits2 = Object.</description>
    </item>
    
    <item>
      <title>【Vue3】關注點分離實作</title>
      <link>https://jack842248.github.io/post/2024-12-03-vue3-%E9%97%9C%E6%B3%A8%E9%BB%9E%E5%88%86%E9%9B%A2%E5%AF%A6%E4%BD%9C/</link>
      <pubDate>Tue, 03 Dec 2024 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2024-12-03-vue3-%E9%97%9C%E6%B3%A8%E9%BB%9E%E5%88%86%E9%9B%A2%E5%AF%A6%E4%BD%9C/</guid>
      <description>&lt;hr&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;h2 id=&#34;傳統javascript&#34;&gt;傳統javascript&lt;/h2&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;&lt;/h1&gt;
&lt;h4 id=&#34;使用傳統javascript實作vue元件生成按綁定刪除事件&#34;&gt;使用傳統JavaScript實作Vue元件生成按綁定刪除事件&lt;/h4&gt;
&lt;h1 id=&#34;heading-2&#34;&gt;&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>【Vue3】this的指向</title>
      <link>https://jack842248.github.io/post/2024-12-02-vue3-this%E7%9A%84%E6%8C%87%E5%90%91/</link>
      <pubDate>Mon, 02 Dec 2024 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2024-12-02-vue3-this%E7%9A%84%E6%8C%87%E5%90%91/</guid>
      <description>&lt;hr&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;h2 id=&#34;傳統函式this&#34;&gt;傳統函式this&lt;/h2&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>【Vue3】JavaScript縮寫</title>
      <link>https://jack842248.github.io/post/2024-12-01-vue3-javascript%E7%B8%AE%E5%AF%AB/</link>
      <pubDate>Sun, 01 Dec 2024 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2024-12-01-vue3-javascript%E7%B8%AE%E5%AF%AB/</guid>
      <description>&lt;hr&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;h2 id=&#34;物件字面值object-literals&#34;&gt;物件字面值(Object literals)&lt;/h2&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;&lt;/h1&gt;</description>
    </item>
    
  </channel>
</rss>
