<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jack Huang Blog</title>
    <link>https://jack842248.github.io/</link>
    <description>Recent content on Jack Huang Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>jack842248@gmail.com (JackHuang)</managingEditor>
    <webMaster>jack842248@gmail.com (JackHuang)</webMaster>
    <lastBuildDate>Thu, 18 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jack842248.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Javascript小知識11</title>
      <link>https://jack842248.github.io/post/2021-02-18-javascript%E5%B0%8F%E7%9F%A5%E8%AD%9811/</link>
      <pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-18-javascript%E5%B0%8F%E7%9F%A5%E8%AD%9811/</guid>
      <description>localStorage   可以將&amp;quot;字串&amp;quot;資料儲存在 Chrome → Application → LocalStorage 裡。      Key Value     &amp;mdash; &amp;mdash;      使用 .setItem 、 .getItem 來存取資料。   1 2 3 4 5 6  /** 存入資料 **/ localStorage.setItem(&amp;#34;a&amp;#34;,&amp;#34;蘋果&amp;#34;); /** 取出資料 **/ let a = localStorage.getItem(&amp;#34;a&amp;#34;); console.log(a); //蘋果       Key Value     a 蘋果       localStorage + input   將輸入框裡的值存入後再取出。   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  // &amp;lt;-----html-----&amp;gt; input(type=&amp;#34;text&amp;#34;) button.</description>
    </item>
    
    <item>
      <title>Javascript小知識10</title>
      <link>https://jack842248.github.io/post/2021-02-17-javascript%E5%B0%8F%E7%9F%A5%E8%AD%9810/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-17-javascript%E5%B0%8F%E7%9F%A5%E8%AD%9810/</guid>
      <description>點擊事件(Click Event)   .onclick = function(){&amp;hellip;} 。    直接在DOM元素上 onclick=&amp;quot;&amp;hellip;&amp;quot; (不建議使用)。    .addEventListener(&amp;ldquo;click&amp;rdquo;,function(){&amp;hellip;}) 。   .onclick只能綁定最後一次事件，.addEventListener可以綁定多次事件，
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  // &amp;lt;-----html-----&amp;gt; button.btn1 按鈕1 button.btn2(onclick=&amp;#34;console.log(&amp;#39;您點擊了，按鈕2&amp;#39;)&amp;#34;) 按鈕2 button.btn3 按鈕3 // &amp;lt;-----js-----&amp;gt; let btn1 = document.querySelector(&amp;#34;.btn1&amp;#34;); let btn3 = document.querySelector(&amp;#34;.btn3&amp;#34;); btn1.onclick = function(){ console.log(&amp;#34;您點擊了，按鈕1&amp;#34;); } btn3.addEventListener(&amp;#34;click&amp;#34;,function(){ console.log(&amp;#34;您點擊了，按鈕3&amp;#34;); });      監聽事件(Listener Event)   .</description>
    </item>
    
    <item>
      <title>Javascript小知識9</title>
      <link>https://jack842248.github.io/post/2021-02-16-javascript%E5%B0%8F%E7%9F%A5%E8%AD%989/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-16-javascript%E5%B0%8F%E7%9F%A5%E8%AD%989/</guid>
      <description>取得DOM元素方法     方法 取得目標 得到結果     .getElementById() id 只能取得一個   .getElementsByName() name 以陣列形式呈現   .getElementsByTagName() &amp;lt;標籤&amp;gt; 以陣列形式呈現   .querySelector() id、class、&amp;lt;標籤&amp;gt; 只能取得一個   .querySelectorAll() id、class 以陣列形式呈現       .getElementById()  1 2 3 4 5 6 7  // &amp;lt;-----html-----&amp;gt; #a 蘋果 #a 香蕉 // &amp;lt;-----js-----&amp;gt; let a = document.getElementById(&amp;#34;a&amp;#34;); console.log(a); //&amp;lt;div id=&amp;#39;a&amp;#39;&amp;gt;蘋果&amp;lt;/div&amp;gt;      .</description>
    </item>
    
    <item>
      <title>Javascript小知識8</title>
      <link>https://jack842248.github.io/post/2021-02-15-javascript%E5%B0%8F%E7%9F%A5%E8%AD%988/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-15-javascript%E5%B0%8F%E7%9F%A5%E8%AD%988/</guid>
      <description>全域變數(Global Variable)   在function裡的變數稱為，區域變數。(範例一)   區域變數(Area Variable)   在function外的變數稱為，全域變數。(範例二)   1 2 3 4 5 6 7 8 9 10 11 12 13 14  /** 範例一 **/ function fn1(){ let a = &amp;#34;蘋果&amp;#34;; console.log(a); //蘋果 } fn1(); /** 範例二 **/ let a; function fn1(){ a = &amp;#34;蘋果&amp;#34;; } fn1(); console.log(a); //蘋果      if、else if、else   適合判斷式數值，限制範圍。    一律使用 if 開頭，若不成立，則往下執行。    可以使用多個 else if ，若不成立，則往下執行。    若以上都不成立則執行 else 。   1 2 3 4 5 6 7 8 9 10 11 12 13 14  let hungry = 5; //飢餓程度1~10 function eat(fruit){ console.</description>
    </item>
    
    <item>
      <title>學習Vue前端框架11</title>
      <link>https://jack842248.github.io/post/2021-02-11-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B611/</link>
      <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-11-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B611/</guid>
      <description>  插槽(Slot)   沒有使用&amp;lt;slot&amp;gt;標籤無法替換內容。   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  // &amp;lt;-----html-----&amp;gt; #app p-cp li 香蕉 //．蘋果  // &amp;lt;-----js-----&amp;gt; var app = new Vue({ el: &amp;#34;#app&amp;#34;, components:{ &amp;#34;p-cp&amp;#34;:{ template: ` &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;蘋果&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; ` } } });       使用&amp;lt;template&amp;gt;自己標籤不被輸出，所以不會覆蓋標籤。    &amp;lt;slot&amp;gt;可以讓&amp;quot;蘋果&amp;quot;被替換，若沒有被替換，&amp;ldquo;蘋果&amp;quot;也會變成預設值而顯示出來。   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  // &amp;lt;-----html-----&amp;gt; #app p-cp template 香蕉 //．香蕉  // &amp;lt;-----js-----&amp;gt; var app = new Vue({ el: &amp;#34;#app&amp;#34;, components:{ &amp;#34;p-cp&amp;#34;:{ template: ` &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt; &amp;lt;slot&amp;gt;蘋果&amp;lt;/slot&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; ` } } });       使用name=&amp;ldquo;自訂名稱&amp;rdquo;，可對應solt=&amp;ldquo;自訂名稱&amp;rdquo;。   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  // &amp;lt;-----html-----&amp;gt; #app p-cp li(slot=&amp;#34;a&amp;#34;) 香蕉 //．蘋果 //．香蕉 //．蘋果  // &amp;lt;-----js-----&amp;gt; var app = new Vue({ el: &amp;#34;#app&amp;#34;, components:{ &amp;#34;p-cp&amp;#34;:{ template: ` &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;蘋果&amp;lt;/li&amp;gt; &amp;lt;slot name=&amp;#34;a&amp;#34;&amp;gt;蘋果&amp;lt;/slot&amp;gt; &amp;lt;li&amp;gt;蘋果&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; ` } } });   </description>
    </item>
    
    <item>
      <title>學習Vue前端框架10</title>
      <link>https://jack842248.github.io/post/2021-02-10-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B610/</link>
      <pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-10-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B610/</guid>
      <description>props   將資料傳入template，並顯示。   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  // &amp;lt;-----html-----&amp;gt; #app p-com(:text=&amp;#34;a&amp;#34;) //蘋果  // &amp;lt;-----js-----&amp;gt; var app = new Vue({ el: &amp;#34;#app&amp;#34;, data:{ a: &amp;#34;蘋果&amp;#34;, }, components:{ &amp;#34;p-com&amp;#34;:{ props: [&amp;#34;text&amp;#34;], template: ` &amp;lt;p&amp;gt;{{text}}&amp;lt;/p&amp;gt; ` } } });     將[陣列]資料傳入template，並用 v-for 列印。   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  // &amp;lt;-----html-----&amp;gt; #app ul-com(v-for=&amp;#34;item in a&amp;#34; :array=&amp;#34;item&amp;#34;) //蘋果 //香蕉 //鳳梨  // &amp;lt;-----js-----&amp;gt; var app = new Vue({ el: &amp;#34;#app&amp;#34;, data:{ a: [&amp;#34;蘋果&amp;#34;,&amp;#34;香蕉&amp;#34;,&amp;#34;鳳梨&amp;#34;], }, components:{ &amp;#34;ul-com&amp;#34;:{ props: [&amp;#34;array&amp;#34;], template: ` &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;{{array}}&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; ` } } });     將[陣列]資料傳入template，並用 v-for 列印。   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  // &amp;lt;-----html-----&amp;gt; #app ul-com(v-for=&amp;#34;item in a&amp;#34; :object=&amp;#34;item&amp;#34;) //蘋果100 //香蕉300 //鳳梨500  // &amp;lt;-----js-----&amp;gt; var app = new Vue({ el: &amp;#34;#app&amp;#34;, data:{ a: [ {name:&amp;#34;蘋果&amp;#34;,amount:100}, {name:&amp;#34;香蕉&amp;#34;,amount:300}, {name:&amp;#34;鳳梨&amp;#34;,amount:500} ], }, components:{ &amp;#34;ul-com&amp;#34;:{ props: [&amp;#34;object&amp;#34;], template: ` &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;{{object.</description>
    </item>
    
    <item>
      <title>學習Vue前端框架9</title>
      <link>https://jack842248.github.io/post/2021-02-09-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B69/</link>
      <pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-09-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B69/</guid>
      <description>元件(Component)   元件資料是獨立運作，也可以重複使用。    元件裡面可以再包元件。    外層傳遞資料到內層可以使用 props ，即時的。    內層傳遞資料到外層可以使用 $emit ，需要被觸發。    使用 components 建立元件:   可以使用data function(){return}來增加資料
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  // &amp;lt;-----html-----&amp;gt; #app button-com button-com // &amp;lt;-----js-----&amp;gt; var vm = new Vue({ el:&amp;#34;#app&amp;#34;, components:{ &amp;#34;button-com&amp;#34;:{ data: function(){ return{ a:50 } }, template: ` &amp;lt;button @click=&amp;#34;a += 1&amp;#34;&amp;gt;{{a}}&amp;lt;/button&amp;gt; ` } } });     使用x-template建立元件:   建立\&amp;lt;script&amp;gt;後使用id去對應</description>
    </item>
    
    <item>
      <title>學習Vue前端框架8</title>
      <link>https://jack842248.github.io/post/2021-02-08-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B68/</link>
      <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-08-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B68/</guid>
      <description>  生命週期     英文 中文 說明      開始創建    beforeCreate 準備載入資料     數據觀測建立    created 載入資料 要載入ajax要在這階段之後    編譯模板    beforeMount 準備繪製元件     模板建立完成    mounted 繪製元件 要操作DOM元素要在這階段之後    資料變動    updated 更新資料時觸發    activated  有&amp;lt;keep-alive&amp;gt;時才會觸發   deactivated  有&amp;lt;keep-alive&amp;gt;時才會觸發   beforeDestroy 準備移除資料     移除觀測、子元件、監聽事件    destroyed 移除資料          </description>
    </item>
    
    <item>
      <title>學習Vue前端框架7</title>
      <link>https://jack842248.github.io/post/2021-02-07-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B67/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-07-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B67/</guid>
      <description>methods版   在&amp;lt;tr&amp;gt;使用 v-for 將[a]資料列印出來。   在&amp;lt;th&amp;gt;&amp;ldquo;價格&amp;quot;上增加 @click 事件[sortPrice]，並在 methods 新增[sortPrice]方法。   [sortPrice]:判斷現在[b]的值是(true/false)，決定要排序大到小，還是小到大。   並且在排序完之後，改變[b]的值。   在&amp;lt;th&amp;gt;&amp;ldquo;到期日&amp;quot;上增加 @click 事件[sortDate]，並在 methods 新增[sortDate]方法。   [sortDate]:判斷現在[c]的值是(true/false)，決定要排序大到小，還是小到大。   並且在排序完之後，改變[c]的值。   在&amp;lt;th&amp;gt;&amp;ldquo;價格&amp;quot;裡的&amp;lt;span&amp;gt;上綁定 :class 判斷式，判斷[b]的值是(true/false)決定是否套用[rotate]樣式。   在&amp;lt;th&amp;gt;&amp;ldquo;到期日&amp;quot;裡的&amp;lt;span&amp;gt;上綁定 :class 判斷式，判斷[c]的值(true/false)決定是否套用[rotate]樣式。   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82  // &amp;lt;-----html-----&amp;gt; #app table.</description>
    </item>
    
    <item>
      <title>學習Vue前端框架6</title>
      <link>https://jack842248.github.io/post/2021-02-06-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B66/</link>
      <pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-06-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B66/</guid>
      <description>修飾符(Modifiers)   在v-on和v-model上使用。     事件修飾符     修飾符 說明 如同     無使用 先觸發自己，再觸發外層    .capture 先觸發外層，再觸發自己    .stop 只觸發自己 event.stopPropagation()   .self 只觸發自己    .once 只觸發一次    .prevent 取消預設事件 event.preventDefault()     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  // &amp;lt;-----html-----&amp;gt; ul#app //** 無使用 **//  li(@click=&amp;#34;alert(&amp;#39;外層&amp;#39;)&amp;#34;) a(href=&amp;#34;#&amp;#34; @click=&amp;#34;alert(&amp;#39;內層&amp;#39;)&amp;#34;) 連結 //** .</description>
    </item>
    
    <item>
      <title>學習Vue前端框架5</title>
      <link>https://jack842248.github.io/post/2021-02-05-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B65/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-05-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B65/</guid>
      <description>radio(三項切換)   v-on + v-if 方法。   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  // &amp;lt;-----html-----&amp;gt; #app input(type=&amp;#34;radio&amp;#34; name=&amp;#34;a&amp;#34; @click=&amp;#34;a=&amp;#39;A&amp;#39;&amp;#34;) input(type=&amp;#34;radio&amp;#34; name=&amp;#34;a&amp;#34; @click=&amp;#34;a=&amp;#39;B&amp;#39;&amp;#34;) input(type=&amp;#34;radio&amp;#34; name=&amp;#34;a&amp;#34; @click=&amp;#34;a=&amp;#39;C&amp;#39;&amp;#34;) p(v-if=&amp;#34; a==&amp;#39;A&amp;#39; &amp;#34;) 蘋果 p(v-else-if=&amp;#34; a==&amp;#39;B&amp;#39; &amp;#34;) 香蕉 p(v-else-if=&amp;#34; a==&amp;#39;C&amp;#39; &amp;#34;) 鳳梨 // &amp;lt;-----js-----&amp;gt; var app = new Vue({ el: &amp;#34;#app&amp;#34;, data:{ a: &amp;#34;A&amp;#34; } });     v-on + {{}} 方法。   1 2 3 4 5 6 7 8 9 10 11 12 13 14  // &amp;lt;-----html-----&amp;gt; #app input(type=&amp;#34;radio&amp;#34; name=&amp;#34;a&amp;#34; @click=&amp;#34;a=&amp;#39;蘋果&amp;#39;&amp;#34;) input(type=&amp;#34;radio&amp;#34; name=&amp;#34;a&amp;#34; @click=&amp;#34;a=&amp;#39;香蕉&amp;#39;&amp;#34;) input(type=&amp;#34;radio&amp;#34; name=&amp;#34;a&amp;#34; @click=&amp;#34;a=&amp;#39;鳳梨&amp;#39;&amp;#34;) p {{a}} // &amp;lt;-----js-----&amp;gt; var app = new Vue({ el: &amp;#34;#app&amp;#34;, data:{ a: &amp;#34;蘋果&amp;#34; } });     v-for + v-on + {{}} 方法。   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  // &amp;lt;-----html-----&amp;gt; #app input(v-for=&amp;#34;item in b&amp;#34; type=&amp;#34;radio&amp;#34; name=&amp;#34;a&amp;#34; @click=&amp;#34;change(item)&amp;#34;) p {{a}} // &amp;lt;-----js-----&amp;gt; var app = new Vue({ el: &amp;#34;#app&amp;#34;, data:{ a: &amp;#34;&amp;#34;, b:[ {name: &amp;#34;蘋果&amp;#34;, amount: 100}, {name: &amp;#34;香蕉&amp;#34;, amount: 300}, {name: &amp;#34;鳳梨&amp;#34;, amount: 500} ], }, methods:{ change: function(item){ switch(item.</description>
    </item>
    
    <item>
      <title>學習Vue前端框架4</title>
      <link>https://jack842248.github.io/post/2021-02-04-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B64/</link>
      <pubDate>Thu, 04 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-04-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B64/</guid>
      <description>v-text模板語法   可以插入 運算子 來呈現結果。(範例一)    使用 v-once 可以只綁定一次，之後在修改不會變更。(範例二)    可以直接撰寫 javascript 。(範例三)   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  // &amp;lt;-----html-----&amp;gt; #app //** 範例一 **//  p {{ a + b }} //100300  p {{ a * b }} //30000  p {{ a == b }} //false  //** 範例二 **//  p(v-text=&amp;#34;b&amp;#34; v-once) //300  //** 範例三 **//  p {{ b.</description>
    </item>
    
    <item>
      <title>學習Vue前端框架3</title>
      <link>https://jack842248.github.io/post/2021-02-03-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B63/</link>
      <pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-03-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B63/</guid>
      <description>建立完成的Bootstrap4初始版型  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  #app.container.my-3 .input-group.mb-3 .input-group-prepend span.input-group-text 待辦事項 input.form-control(type=&amp;#39;text&amp;#39; placeholder=&amp;#39;準備要做的任務&amp;#39;) .input-group-append button.btn.btn-primary(type=&amp;#39;button&amp;#39;) 新增 .card.text-center .card-header ul.nav.nav-tabs.card-header-tabs li.nav-item a.nav-link.active(href=&amp;#39;#&amp;#39;) 全部 li.nav-item a.nav-link(href=&amp;#39;#&amp;#39;) 進行中 li.nav-item a.nav-link(href=&amp;#39;#&amp;#39;) 已完成 ul.list-group.list-group-flush.text-left li.list-group-item(v-for=&amp;#34;item in filterTodo&amp;#34;) .d-flex .form-check input.form-check-input(type=&amp;#39;checkbox&amp;#39; id=&amp;#34;a1&amp;#34;) label.form-check-label(:for=&amp;#39;item.id&amp;#39;) 待辦事項一 button.close.ml-auto(type=&amp;#39;button&amp;#39;) span &amp;amp;times; input.form-control(type=&amp;#39;text&amp;#39;) .card-footer.d-flex.justify-content-between span 還有X筆任務未完成 a(href=&amp;#39;#&amp;#39;) 清除所有任務      撰寫Vue.</description>
    </item>
    
    <item>
      <title>學習Vue前端框架2</title>
      <link>https://jack842248.github.io/post/2021-02-02-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B62/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-02-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B62/</guid>
      <description>取得輸入框裡的值，點擊按鈕，新增到清單上。   在 data 新增[newTodo]=&amp;ldquo;空字串&amp;rdquo;，用 v-model 與 輸入框 綁定。   在 新增按鈕 上綁定 @click 事件[addTodo]，在 methods 新增[addTodo]方法。   在 data 新增[todos]=[空陣列]。   使用 Date.now() 取得現在時間作為編號 (id) ，並賦予到[id]變數上。   將[newTodo]，賦予到[title]變數上。   將[id]、[title]和[checkbox]:false組成{物件}，使用 push() 將組成的{物件}傳入[todos]。   在 &amp;lt;li&amp;gt; 使用 v-for 列印出[todos]的所有{物件}，並且將{物件}命名為 (item) (item in todos)。   將 (item) 的[id]用 :for綁定在 &amp;lt;label&amp;gt; 上。   將 (item) 的[id]用 :id綁定在 checkbox 上。   將 (item) 的[title]用 {{}} 顯示在 &amp;lt;label&amp;gt;文字上 。   將 (item) 的[checkbox]用 v-model 綁定在 checkbox 上。   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  // &amp;lt;-----html-----&amp;gt; #app //1.</description>
    </item>
    
    <item>
      <title>學習Vue前端框架1</title>
      <link>https://jack842248.github.io/post/2021-02-01-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B61/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-02-01-%E5%AD%B8%E7%BF%92vue%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B61/</guid>
      <description>Vue.js是以資料狀態操作畫面，偏向MVVM軟體設計模式。
 MVVM(Model View Viewmodel)     英文 Model View Viewmodel     中文 模型 視圖 資料聯繫器      [視圖]←綁定→[資料聯繫器]→←[模型]     MVC(Model View Controller)     英文 Model View Controller Database     中文 模型 視圖 控制器 資料庫      [視圖]→發送請求→[控制器]→[模型]→[資料庫]→回傳資料→[模型]→[控制器]→渲染→[視圖]     開始使用Vue.js   使用 element (簡化:el)綁定HTML上的DOM元素。    #app裡不能再建立#app。    若有多個.</description>
    </item>
    
    <item>
      <title>Vue.js devtools安裝</title>
      <link>https://jack842248.github.io/post/2021-01-31-vue.js-devtools%E5%AE%89%E8%A3%9D/</link>
      <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-31-vue.js-devtools%E5%AE%89%E8%A3%9D/</guid>
      <description>&lt;hr&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;h2 id=&#34;安裝vuejs-devtools開發者工具&#34;&gt;安裝Vue.js devtools開發者工具&lt;/h2&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>Javascript小知識7</title>
      <link>https://jack842248.github.io/post/2021-01-30-javascript%E5%B0%8F%E7%9F%A5%E8%AD%987/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-30-javascript%E5%B0%8F%E7%9F%A5%E8%AD%987/</guid>
      <description>var、let、const   皆為宣告變數用。      名稱 var let const     作用域 在函式裡 在block{}裡 在block{}裡   宣告的變數 可以賦予新的值 可以賦予新的值 不能賦予新的值   重複宣告變數時 不會出錯 會出錯 會出錯   從創造到執行階段會 提升(Hoisting) 暫時性死區(TDZ) 會出現錯誤     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  /** 變數賦予新的值 **/ var a = 1; a = 2; console.</description>
    </item>
    
    <item>
      <title>Javascript小知識6</title>
      <link>https://jack842248.github.io/post/2021-01-29-javascript%E5%B0%8F%E7%9F%A5%E8%AD%986/</link>
      <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-29-javascript%E5%B0%8F%E7%9F%A5%E8%AD%986/</guid>
      <description>Object.defineProperty()   可以調整物件裡的屬性特徵。      帶入的值 名稱 中文 預設值 例如     物件 Object  &amp;mdash;    屬性 &amp;quot;Attributes&amp;quot;  &amp;mdash;    參數a value 屬性的值 &amp;mdash;    參數b writable 可否寫入 true 賦予(=)   參數c configurable 可否被刪除 true delete   參數d enumerable 可否被列舉 true for&amp;hellip;in     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  var obj1 = { name:&amp;#34;蘋果&amp;#34;, amount:100 } Object.</description>
    </item>
    
    <item>
      <title>Javascript小知識5</title>
      <link>https://jack842248.github.io/post/2021-01-28-javascript%E5%B0%8F%E7%9F%A5%E8%AD%985/</link>
      <pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-28-javascript%E5%B0%8F%E7%9F%A5%E8%AD%985/</guid>
      <description>原型(Prototype)   純值可用建構式繼承在原型下。    原型可利用建構函式新增屬性。    原型有向上查找屬性的功能，而且屬性是共用的。    原型鍊:      建構式 原型(上層) 原型(上上層)     new Object() &amp;mdash; Object   new Array() Array Object   new Number() Number Object   new String() String Object   new Boolean() Boolean Object     1 2 3 4 5 6 7 8 9  var a = [1 , 2 , 3]; var b = [4 , 5 , 6]; a.</description>
    </item>
    
    <item>
      <title>Javascript小知識4</title>
      <link>https://jack842248.github.io/post/2021-01-27-javascript%E5%B0%8F%E7%9F%A5%E8%AD%984/</link>
      <pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-27-javascript%E5%B0%8F%E7%9F%A5%E8%AD%984/</guid>
      <description>函式(Function)   是包含{程式碼片段}的物件。    擁有被呼叫、回傳的功能。     函式可細分以下幾種 :
  函式陳述式
 具名函式。(範例一)    函式表達式
  匿名函式。(範例二)
  具名函式。(範例三)
       具名的函式能夠在函式中被呼叫使用
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  /** 範例一 **/ function fn1(){ console.</description>
    </item>
    
    <item>
      <title>Javascript小知識3</title>
      <link>https://jack842248.github.io/post/2021-01-26-javascript%E5%B0%8F%E7%9F%A5%E8%AD%983/</link>
      <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-26-javascript%E5%B0%8F%E7%9F%A5%E8%AD%983/</guid>
      <description>物件實字(Object Literals)   直接撰寫 var obj1 = {&amp;hellip;} 物件。(範例一)   建構物件(Constructor Object)   使用 new Object() 包裹方式建立。(範例二)   1 2 3 4 5 6 7 8 9 10  /** 範例一 **/ var obj1 = { name:&amp;#34;蘋果&amp;#34;, amount: 100 } /** 範例二 **/ var obj1 = new Object(); obj1.name = &amp;#34;蘋果&amp;#34;; obj1.amount = 100;      物件的基本應用方法 :   取值。(範例一)    新增屬性。(範例二)    刪除屬性。(範例三)    新增物件。(範例四)   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  var fruit = { name:&amp;#34;蘋果&amp;#34;, amount: 100 } /** 範例一 **/ console.</description>
    </item>
    
    <item>
      <title>Javascript小知識2</title>
      <link>https://jack842248.github.io/post/2021-01-25-javascript%E5%B0%8F%E7%9F%A5%E8%AD%982/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-25-javascript%E5%B0%8F%E7%9F%A5%E8%AD%982/</guid>
      <description>陳述式(Statement)   不會回傳結果，不能賦值(=)到變數上。      陳述式 例如     判斷式 if、else if、else、switch、break   宣告變數 var、let、const   函式陳述式 function fn1(){&amp;hellip;}   Block區塊 {}     1 2 3 4 5 6 7 8 9 10 11 12 13  /** 判斷式 **/ if(...){...}else{...} /** 宣告變數 **/ var a; /** 函式陳述式 **/ function fn1(){...} /** Block區塊 **/ { let a = 1; }      判斷式(if&amp;hellip;else)   判斷式裡如果是 真值(Truthy) ，就會成立。(範例一)    判斷式裡如果是 假值(Falsy) ，就會不成立。(範例二)      判斷值 例如     真值 true 、 1 、 &amp;ldquo;1&amp;rdquo; 、 [] 、 {}   假值 false 、 0 、 &amp;quot;&amp;quot; 、 NaN 、 null 、 undefined     1 2 3 4 5 6 7 8 9 10 11 12 13  /** 範例一 **/ if([]){ console.</description>
    </item>
    
    <item>
      <title>Javascript小知識1</title>
      <link>https://jack842248.github.io/post/2021-01-24-javascript%E5%B0%8F%E7%9F%A5%E8%AD%981/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-24-javascript%E5%B0%8F%E7%9F%A5%E8%AD%981/</guid>
      <description>程式語言可以分為兩種 : javascript屬於直譯式語言。  直譯式語言(Interpreted Language)     例如 JavaScript、Python、PHP、Ruby、BASIC、LISP、Perl、R     流程 原始碼 → 直譯器 → 代碼生成 → 執行   特性 程式碼由上到下執行，效能比較差、除錯比較慢、需要依賴執行環境。     編譯式語言(Compiled Language)     例如 Java、C、C#、C++、Pascal     流程 原始碼 → 預處理器 → 代碼生成 → 執行   特性 效能比較好、除錯比較快、程式碼可獨立執行。       程式語言的作用域可以分為兩種 : javascript屬於靜態作用域。  靜態作用域(Lexical Scope)   又稱 : 語法作用域。    語法在解析時就決定作用域，且不再改變。   1 2 3 4 5 6  function fn1(){ var a = 1; } fn1(); console.</description>
    </item>
    
    <item>
      <title>Markdown撰寫語法</title>
      <link>https://jack842248.github.io/post/2021-01-23-markdown%E5%9F%BA%E6%9C%AC%E6%92%B0%E5%AF%AB/</link>
      <pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-23-markdown%E5%9F%BA%E6%9C%AC%E6%92%B0%E5%AF%AB/</guid>
      <description>一級標題 # 一級標題    二級標題  ## 二級標題    三級標題  ### 三級標題    四級標題  #### 四級標題    五級標題  ##### 五級標題    六級標題  ###### 六級標題    斜體
 *斜體*    粗體
 **粗體**    粗斜體
 ***粗斜體***    文字刪除線
 ~~文字刪除線~~     有序序列 有序序列 有序序列   1.</description>
    </item>
    
    <item>
      <title>Hugo Blog建立成功</title>
      <link>https://jack842248.github.io/post/2021-01-22-hugo-blog%E5%BB%BA%E7%AB%8B%E6%88%90%E5%8A%9F/</link>
      <pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/post/2021-01-22-hugo-blog%E5%BB%BA%E7%AB%8B%E6%88%90%E5%8A%9F/</guid>
      <description>前言
  我所使用的Hugo主題是beautiful hugo。
 當初在建立時，是觀看Github 免費架站術！輕鬆打造個人品牌這堂課程，才完成它的。
 這堂課非常適合初心者學習，
 裡面包含Github、Hugo、Markdown的介紹與使用，
 有興趣的可以參考看看。
    分享設定
  其中對於Hugo主題裡的config.toml不知道要怎麼設定&amp;hellip;
 不論你選擇的主題是否跟我一樣，在設定上還是有一些相似的地方。
 在此你可以參考我的主題設定來完成它 :
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81  #此網站的連結網址 baseurl = &amp;#34;https://jack842248.</description>
    </item>
    
    <item>
      <title>ABOUT</title>
      <link>https://jack842248.github.io/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>jack842248@gmail.com (JackHuang)</author>
      <guid>https://jack842248.github.io/page/about/</guid>
      <description>我來自桃園，大學畢業於彰化大葉大學多媒體設計系，接觸過不少程式軟體，畢業後在曼黛瑪璉擔任空間陳列職員，現在因為接觸了線上課程，毅然決然地加入網頁領域。
因學到的知識越來越多，手寫筆記一本接一本的寫，這麼龐大的資料紀載，如果再用手寫實在是太慢了，因此開設此部落格來記錄整個資料以及歷程。</description>
    </item>
    
  </channel>
</rss>
